{"version":3,"sources":["../src/domain/sshCommand.js","../src/domain/sshTerminalSettings.js","../src/domain/attachSshCommand.js","../src/domain/sshCloseCode.js","../src/domain/sshSession.js","../src/net/sshUrlHelperMixin.js"],"names":["SshCommand","command","data","_classCallCheck","this","constructor","Object","freeze","result","toJsonEncoding","dataJson","JSON","parse","stringify","json","dataParser","obj","SshTerminalSettings","cols","lines","width","height","type","environment","Map","objectToStringMap","size","stringMapToObject","SolarSshCommandAttachSsh","AttachSshCommand","authorization","authorizationDate","username","password","terminalSettings","Date","getTime","termOpts","_i","_Object$keys","keys","length","prop","undefined","_possibleConstructorReturn","_getPrototypeOf","call","SshCloseCode","name","value","_this","_assertThisInitialized","ComparableEnum","SshCloseCodeValues","SshCloseCodes","enumsValue","SshSession","created","sessionId","nodeId","sshHost","sshPort","reverseSshPort","startInstructionId","stopInstructionId","args","push","host","port","reversePort","_construct","InstructionUrlHelper","NodeInstructionUrlHelperMixin","NodeMetadataUrlHelperMixin","UserUrlHelperMixin","NodeUrlHelperMixin","UrlHelper","SshUrlHelperMixin","superclass","_superclass","_class","_getPrototypeOf2","_len","arguments","Array","_key","env","Environment","tls","solarSshPath","apply","concat","_toConsumableArray","_instructionUrlHelper","_instructionAuthBuilder","AuthorizationV2Builder","_inherits","_createClass","key","path","hostUrl","sessId","sshSessionId","hostWebSocketUrl","encodeURIComponent","node","baseUrl","reset","snDate","method","url","viewPendingInstructionsUrl","sshSession","session","contentType","queueInstructionUrl","instructionId","instrId","viewInstructionUrl","viewStartRemoteSshInstructionUrl","viewStopRemoteSshInstructionUrl","viewNodeMetadataUrl","get","parameter","set","_set","prototype","_get","SshUrlHelper"],"mappings":"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","file":"lib/solarnetwork-api-ssh.min.js.map","sourcesContent":["/**\n * A command with data.\n */\nclass SshCommand {\n  /**\n   * Constructor.\n   *\n   * @param {string} command the command\n   * @param {*} [data] optional data to associate with the command\n   */\n  constructor(command, data) {\n    this.command = command;\n    this.data = data;\n    if (this.constructor === SshCommand) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * If <code>data</code> has a <code>toJsonEncoding()</code> function, that will be invoked\n   * and used in the result. Otherwise the <code>data</code> object will be serialized to\n   * JSON via <code>JSON.stringify()</code>.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.command) {\n      result[\"cmd\"] = this.command;\n    }\n    const data = this.data;\n    if (data && data.toJsonEncoding) {\n      const dataJson = data.toJsonEncoding();\n      result[\"data\"] = JSON.parse(dataJson);\n    } else if (data) {\n      result[\"data\"] = data;\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshCommand} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshCommand#toJsonEncoding} does.\n   *\n   * @param {string} json the JSON to parse\n   * @param {function} [dataParser] if provided, a function that accepts a string of JSON and returns\n   *                                an object representation of that data; if not provided then a\n   *                                simple object parsed via <code>JSON.parse()</code> will be used\n   * @returns {module:domain~SshCommand} the command instance\n   */\n  static fromJsonEncoding(json, dataParser) {\n    let command, data;\n    if (json) {\n      const obj = JSON.parse(json);\n      command = obj[\"cmd\"];\n      data = obj[\"data\"];\n      if (data && dataParser) {\n        data = dataParser(JSON.stringify(data));\n      }\n    }\n    return new SshCommand(command, data);\n  }\n}\n\nexport default SshCommand;\n","/** @module domain */\n\nimport { stringMapToObject, objectToStringMap } from \"solarnetwork-api-core\";\n\n/**\n * Settings for a SSH terminal.\n */\nclass SshTerminalSettings {\n  /**\n   * Constructor.\n   *\n   * @param {number} [cols=80] the characters width\n   * @param {number} [lines=24] the number of lines\n   * @param {number} [width=640] the pixel width\n   * @param {number} [height=480] the pixel height\n   * @param {string} [type=xterm] the terminal type\n   * @param {Map<string, string>} [environment] environment properties to pass to the shell\n   */\n  constructor(cols, lines, width, height, type, environment) {\n    this.cols = cols || 80;\n    this.lines = lines || 24;\n    this.width = width || 640;\n    this.height = height || 480;\n    this.type = type || \"xterm\";\n    this.environment =\n      environment instanceof Map ? environment : objectToStringMap(environment);\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.type) {\n      result[\"term\"] = this.type;\n    }\n    if (this.cols) {\n      result[\"cols\"] = this.cols;\n    }\n    if (this.lines) {\n      result[\"lines\"] = this.lines;\n    }\n    if (this.width) {\n      result[\"width\"] = this.width;\n    }\n    if (this.height) {\n      result[\"height\"] = this.height;\n    }\n    if (this.environment instanceof Map && this.environment.size > 0) {\n      result[\"environment\"] = stringMapToObject(this.environment);\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshTerminalSettings} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshTerminalSettings#toJsonEncoding} does.\n   *\n   * @param {string} json the JSON to parse\n   * @returns {module:domain~SshTerminalSettings} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const result = new SshTerminalSettings();\n    if (json) {\n      const obj = JSON.parse(json);\n      if (obj[\"term\"]) {\n        result.type = obj[\"term\"];\n      }\n      if (obj[\"cols\"]) {\n        result.cols = obj[\"cols\"];\n      }\n      if (obj[\"lines\"]) {\n        result.lines = obj[\"lines\"];\n      }\n      if (obj[\"width\"]) {\n        result.width = obj[\"width\"];\n      }\n      if (obj[\"height\"]) {\n        result.height = obj[\"height\"];\n      }\n      if (obj[\"environment\"]) {\n        result.environment = objectToStringMap(obj[\"environment\"]);\n      }\n    }\n    return result;\n  }\n}\n\nexport default SshTerminalSettings;\n","import SshCommand from \"./sshCommand\";\nimport SshTerminalSettings from \"./sshTerminalSettings\";\n\n/** The command for attaching to a SSH terminal shell. */\nexport const SolarSshCommandAttachSsh = \"attach-ssh\";\n\n/**\n * SSH command for attaching to a SSH terminal shell.\n */\nclass AttachSshCommand extends SshCommand {\n  /**\n   * Constructor.\n   *\n   * @param {string} authorization a pre-computed SNWS2 authorization header, which must match\n   *        exactly a `GET` request to the `/solaruser/api/v1/sec/nodes/meta/:nodeId`\n   *        path using the provided authorization date and, node ID.\n   * @param {Date|number} authorizationDate the date used in the `authorization` value\n   * @param {string} username the SSH username to use\n   * @param {string} password the SSH password to use\n   * @param {SshTerminalSettings} [terminalSettings] optional terminal settings to use\n   */\n  constructor(\n    authorization,\n    authorizationDate,\n    username,\n    password,\n    terminalSettings\n  ) {\n    const data = {};\n    data[\"authorization\"] = authorization;\n    data[\"authorization-date\"] =\n      authorizationDate instanceof Date\n        ? authorizationDate.getTime()\n        : authorizationDate;\n    data[\"username\"] = username;\n    data[\"password\"] = password;\n    if (terminalSettings instanceof SshTerminalSettings) {\n      const termOpts = JSON.parse(terminalSettings.toJsonEncoding());\n      for (const prop of Object.keys(termOpts)) {\n        if (data[prop] === undefined) {\n          data[prop] = termOpts[prop];\n        }\n      }\n    }\n    super(SolarSshCommandAttachSsh, data);\n  }\n}\n\nexport default AttachSshCommand;\n","/** @module domain */\n\nimport { ComparableEnum } from \"solarnetwork-api-core\";\n\n/**\n * A named socket close code.\n */\nclass SshCloseCode extends ComparableEnum {\n  /**\n   * Constructor.\n   *\n   * @param {string} name the name\n   * @param {value} value the value\n   */\n  constructor(name, value) {\n    super(name, value);\n    if (this.constructor === SshCloseCode) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get the {@link SshCloseCodes} values.\n   *\n   * @inheritdoc\n   */\n  static enumValues() {\n    return SshCloseCodeValues;\n  }\n}\n\nconst SshCloseCodeValues = Object.freeze([\n  new SshCloseCode(\"AUTHENTICATION_FAILURE\", 4000)\n]);\n\n/**\n * The enumeration of supported SshCloseCode values.\n *\n * @readonly\n * @enum {SshCloseCode}\n * @property {SshCloseCode} AUTHENTICATION_FAILURE an authentication failure\n */\nconst SshCloseCodes = SshCloseCode.enumsValue(SshCloseCodeValues);\n\nexport default SshCloseCodes;\nexport { SshCloseCode };\n","/** @module domain */\n\n/**\n * A SolarSSH session object.\n */\nclass SshSession {\n  /**\n   * Constructor.\n   *\n   * @param {Date} created the creation date\n   * @param {string} sessionId the unique session ID\n   * @param {number} nodeId the node ID\n   * @param {string} sshHost the SSH host name\n   * @param {number} sshPort the SSH port\n   * @param {number} reverseSshPort the reverse SSH port\n   * @param {number} [startInstructionId] the <code>StartRemoteSsh</code> instruction ID\n   * @param {number} [stopInstructionId] the <code>StopRemoteSsh</code> instruction ID\n   */\n  constructor(\n    created,\n    sessionId,\n    nodeId,\n    sshHost,\n    sshPort,\n    reverseSshPort,\n    startInstructionId,\n    stopInstructionId\n  ) {\n    this.created = created;\n    this.sessionId = sessionId;\n    this.nodeId = nodeId;\n    this.sshHost = sshHost;\n    this.sshPort = sshPort;\n    this.reverseSshPort = reverseSshPort;\n    this.startInstructionId = startInstructionId;\n    this.stopInstructionId = stopInstructionId;\n    if (this.constructor === SshSession) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.sessionId) {\n      result[\"sessionId\"] = this.sessionId;\n    }\n    if (this.created) {\n      result[\"created\"] = this.created.getTime();\n    }\n    if (this.nodeId) {\n      result[\"nodeId\"] = this.nodeId;\n    }\n    if (this.sshHost) {\n      result[\"host\"] = this.sshHost;\n    }\n    if (this.sshPort) {\n      result[\"port\"] = this.sshPort;\n    }\n    if (this.reverseSshPort) {\n      result[\"reversePort\"] = this.reverseSshPort;\n    }\n    if (this.startInstructionId) {\n      result[\"startInstructionId\"] = this.startInstructionId;\n    }\n    if (this.stopInstructionId) {\n      result[\"stopInstructionId\"] = this.stopInstructionId;\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshSession} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshSession#toJsonEncoding} does.\n   *\n   * @param {string|Object} json the JSON to parse, or a parsed JSON object\n   * @returns {module:domain~SshSession} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const args = [];\n    if (json) {\n      const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n      if (obj.created) {\n        args.push(new Date(obj.created));\n      } else {\n        args.push(new Date());\n      }\n      args.push(obj.sessionId || \"\");\n      args.push(obj.nodeId || null);\n      args.push(obj.host || \"\");\n      args.push(obj.port || null);\n      args.push(obj.reversePort || null);\n      args.push(obj.startInstructionId);\n      args.push(obj.stopInstructionId);\n    }\n    return new SshSession(...args);\n  }\n}\n\nexport default SshSession;\n","/** @module net */\n\nimport {\n  AuthorizationV2Builder,\n  Environment,\n  NodeInstructionUrlHelperMixin,\n  NodeMetadataUrlHelperMixin,\n  NodeUrlHelperMixin,\n  UrlHelper,\n  UserUrlHelperMixin\n} from \"solarnetwork-api-core\";\n\n/** The SolarSsh default path. */\nexport const SolarSshDefaultPath = \"\";\n\n/** The {@link UrlHelper} parameters key for the SolarSsh path. */\nexport const SolarSshPathKey = \"solarSshPath\";\n\n/** The SolarSsh REST API path. */\nexport const SolarSshApiPathV1 = \"/api/v1\";\n\n/** The SolarSsh WebSocket path for a terminal connection. */\nexport const SolarSshTerminalWebSocketPath = \"/ssh\";\n\n/** The sub-protocol to use for SolarSSH WebSocket connections. */\nexport const SolarSshTerminalWebSocketSubProtocol = \"solarssh\";\n\n/** An {@link UrlHelper} parameter key for a {@link SshSession} instance. */\nexport const SshSessionKey = \"sshSession\";\n\n/** The node instruction for initiating a SolarSSH connection. */\nexport const StartRemoteSshInstructionName = \"StartRemoteSsh\";\n\n/** The node instruction for closing a SolarSSH connection. */\nexport const StopRemoteSshInstructionName = \"StopRemoteSsh\";\n\n/**\n * UrlHelper that supports instructions and node metadata.\n */\nclass InstructionUrlHelper extends NodeInstructionUrlHelperMixin(\n  NodeMetadataUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)))\n) {}\n\n/**\n * Create a SshUrlHelperMixin class.\n *\n * @exports net\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~SshUrlHelperMixin} the mixin class\n */\nconst SshUrlHelperMixin = superclass =>\n  /**\n   * A mixin class that adds SolarSsh specific support to {@link UrlHelper}.\n   *\n   * @mixin\n   * @alias module:net~SshUrlHelperMixin\n   */\n  class extends superclass {\n    /**\n     * Constructor.\n     *\n     * @param {*} args any number of arguments, but the first argument is assumed to be either an {@link Environment}\n     *                 instance or a simple object that serves as the SolarSSH environment\n     */\n    constructor(...args) {\n      const env =\n        args && args[0]\n          ? args[0] instanceof Environment\n            ? args[0]\n            : new Environment(args[0])\n          : new Environment({\n              tls: true,\n              host: \"ssh.solarnetwork.net\",\n              port: 8443,\n              solarSshPath: \"\"\n            });\n      if (!args) {\n        args = [];\n      }\n      args[0] = env;\n      super(...args);\n      this._instructionUrlHelper = new InstructionUrlHelper();\n      this._instructionAuthBuilder = new AuthorizationV2Builder(\n        null,\n        this._instructionUrlHelper\n      );\n    }\n\n    /**\n     * A SSH session object.\n     *\n     * @type {SshSession}\n     */\n    get sshSession() {\n      return this.parameter(SshSessionKey);\n    }\n\n    set sshSession(sshSession) {\n      this.parameter(SshSessionKey, sshSession);\n    }\n\n    /**\n     * Set the node ID.\n     * @override\n     * @inheritdoc\n     */\n    set nodeId(nodeId) {\n      super.nodeId = nodeId;\n      this._instructionUrlHelper.nodeId = nodeId;\n    }\n\n    /**\n     * Get the node ID.\n     * @override\n     * @inheritdoc\n     */\n    get nodeId() {\n      return super.nodeId;\n    }\n\n    /**\n     * Get the environment used for instruction URL pre-authorization values.\n     *\n     * @type {Environment}\n     */\n    get nodeUrlHelperEnvironment() {\n      return this._instructionUrlHelper.environment;\n    }\n\n    set nodeUrlHelperEnvironment(environment) {\n      this._instructionUrlHelper.environment = environment;\n      this._instructionAuthBuilder.environment = environment;\n    }\n\n    /**\n     * Get the auth builder used for instruction URL pre-authorization values.\n     *\n     * @type {AuthorizationV2Builder}\n     */\n    get nodeInstructionAuthBuilder() {\n      return this._instructionAuthBuilder;\n    }\n\n    /**\n     * Shortcut for getting the SSH session ID from the {@link module:domain~SshSession#session} property.\n     *\n     * @alias SshSession#sessionId\n     * @readonly\n     * @type {string}\n     */\n    get sshSessionId() {\n      const session = this.sshSession;\n      return session ? session.sessionId : undefined;\n    }\n\n    /**\n     * Get the base URL to the SolarSSH v1 REST API.\n     *\n     * The returned URL uses the configured environment to resolve\n     * the <code>hostUrl</code>, the <code>solarSshPath</code> context path.\n     *\n     * @returns {string} the base URL to SolarSSH\n     */\n    baseUrl() {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      return this.hostUrl() + path + SolarSshApiPathV1;\n    }\n\n    /**\n     * Get the URL to the SolarSSH WebSocket termainl connection to the configured SolarNode.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the WebSocket terminal URL\n     */\n    terminalWebSocketUrl(sessionId) {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.hostWebSocketUrl() +\n        path +\n        SolarSshTerminalWebSocketPath +\n        \"?sessionId=\" +\n        encodeURIComponent(sessId)\n      );\n    }\n\n    /**\n     * Get the URL to the SolarSSH HTTP proxy to the configured SolarNode.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the HTTP proxy URL\n     */\n    httpProxyUrl(sessionId) {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.hostUrl() + path + \"/nodeproxy/\" + encodeURIComponent(sessId) + \"/\"\n      );\n    }\n\n    /**\n     * Generate a URL for creating a new SolarSSH session.\n     *\n     * @param {number} [nodeId] the node ID to connect to; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {string} the URL\n     */\n    createSshSessionUrl(nodeId) {\n      const node = nodeId || this.nodeId;\n      return this.baseUrl() + \"/ssh/session/new?nodeId=\" + node;\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     *\n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     *\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    createSshSessionAuthBuilder(nodeId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"GET\")\n        .url(this._instructionUrlHelper.viewPendingInstructionsUrl(nodeId));\n    }\n\n    /**\n     * Generate a URL for starting a SolarSSH session.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    startSshSessionUrl(sessionId) {\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.baseUrl() + \"/ssh/session/\" + encodeURIComponent(sessId) + \"/start\"\n      );\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the start session request.\n     *\n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL  with the <code>StartRemoteSsh</code> instruction.\n     *\n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    startSshSessionAuthBuilder(sshSession, nodeId) {\n      const session = sshSession || this.sshSession || {};\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"POST\")\n        .contentType(\"application/x-www-form-urlencoded\")\n        .url(\n          this._instructionUrlHelper.queueInstructionUrl(\n            StartRemoteSshInstructionName,\n            [\n              { name: \"host\", value: session.sshHost },\n              { name: \"user\", value: session.sessionId },\n              { name: \"port\", value: session.sshPort },\n              { name: \"rport\", value: session.reverseSshPort }\n            ],\n            nodeId\n          )\n        );\n    }\n\n    /**\n     * Generate a URL for stopping a SolarSSH session.\n     *\n     * @param {string} [sessionId] the {@link module:domain/sshSession~SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    stopSshSessionUrl(sessionId) {\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.baseUrl() + \"/ssh/session/\" + encodeURIComponent(sessId) + \"/stop\"\n      );\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the stop session request.\n     *\n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL with the <code>StopRemoteSsh</code> instruction.\n     *\n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    stopSshSessionAuthBuilder(sshSession, nodeId) {\n      const session = sshSession || this.sshSession || {};\n      const node = nodeId || this.nodeId;\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"POST\")\n        .contentType(\"application/x-www-form-urlencoded\")\n        .url(\n          this._instructionUrlHelper.queueInstructionUrl(\n            StopRemoteSshInstructionName,\n            [\n              { name: \"host\", value: session.sshHost },\n              { name: \"user\", value: session.sessionId },\n              { name: \"port\", value: session.sshPort },\n              { name: \"rport\", value: session.reverseSshPort }\n            ],\n            node\n          )\n        );\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StartRemoteSsh</code> instruction.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStartRemoteSshInstructionUrl(instructionId) {\n      const session = this.sshSession || {};\n      const instrId = instructionId || session.startInstructionId;\n      return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StartRemoteSsh</code> instruction.\n     *\n     * <p>The returned builder will be configured with the same URL returned from\n     * {@link module:net~SshUrlHelperMixin#viewStartRemoteSshInstructionUrl}.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    viewStartRemoteSshInstructionAuthBuilder(instructionId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .url(this.viewStartRemoteSshInstructionUrl(instructionId));\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StopRemoteSsh</code> instruction.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStopRemoteSshInstructionUrl(instructionId) {\n      const session = this.sshSession || {};\n      const instrId = instructionId || session.stopInstructionId;\n      return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StopRemoteSsh</code> instruction.\n     *\n     * <p>The returned builder will be configured with the same URL returned from\n     * {@link module:net~SshUrlHelperMixin#viewStopRemoteSshInstructionUrl}.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>stopInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    viewStopRemoteSshInstructionAuthBuilder(instructionId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .url(this.viewStopRemoteSshInstructionUrl(instructionId));\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     *\n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     *\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    connectTerminalWebSocketAuthBuilder(nodeId) {\n      const node = nodeId || this.nodeId;\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"GET\")\n        .url(this._instructionUrlHelper.viewNodeMetadataUrl(node));\n    }\n  };\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~SshUrlHelperMixin} and\n * {@link NodeUrlHelperMixin} mixins.\n *\n * @mixes SshUrlHelperMixin\n * @mixes NodeUrlHelperMixin\n * @extends UrlHelper\n */\nclass SshUrlHelper extends SshUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)) {}\n\nexport default SshUrlHelperMixin;\nexport { SshUrlHelper };\n"]}