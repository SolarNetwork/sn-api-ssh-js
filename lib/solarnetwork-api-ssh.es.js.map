{"version":3,"file":"solarnetwork-api-ssh.es.js","sources":["../src/domain/sshCommand.js","../src/domain/sshTerminalSettings.js","../src/domain/attachSshCommand.js","../src/domain/sshCloseCode.js","../src/domain/sshSession.js","../src/net/sshUrlHelperMixin.js"],"sourcesContent":["/**\n * A command with data.\n */\nclass SshCommand {\n  /**\n   * Constructor.\n   *\n   * @param {string} command the command\n   * @param {*} [data] optional data to associate with the command\n   */\n  constructor(command, data) {\n    this.command = command;\n    this.data = data;\n    if (this.constructor === SshCommand) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * If <code>data</code> has a <code>toJsonEncoding()</code> function, that will be invoked\n   * and used in the result. Otherwise the <code>data</code> object will be serialized to\n   * JSON via <code>JSON.stringify()</code>.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.command) {\n      result[\"cmd\"] = this.command;\n    }\n    const data = this.data;\n    if (data && data.toJsonEncoding) {\n      const dataJson = data.toJsonEncoding();\n      result[\"data\"] = JSON.parse(dataJson);\n    } else if (data) {\n      result[\"data\"] = data;\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshCommand} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshCommand#toJsonEncoding} does.\n   *\n   * @param {string} json the JSON to parse\n   * @param {function} [dataParser] if provided, a function that accepts a string of JSON and returns\n   *                                an object representation of that data; if not provided then a\n   *                                simple object parsed via <code>JSON.parse()</code> will be used\n   * @returns {module:domain~SshCommand} the command instance\n   */\n  static fromJsonEncoding(json, dataParser) {\n    let command, data;\n    if (json) {\n      const obj = JSON.parse(json);\n      command = obj[\"cmd\"];\n      data = obj[\"data\"];\n      if (data && dataParser) {\n        data = dataParser(JSON.stringify(data));\n      }\n    }\n    return new SshCommand(command, data);\n  }\n}\n\nexport default SshCommand;\n","/** @module domain */\n\nimport { stringMapToObject, objectToStringMap } from \"solarnetwork-api-core\";\n\n/**\n * Settings for a SSH terminal.\n */\nclass SshTerminalSettings {\n  /**\n   * Constructor.\n   *\n   * @param {number} [cols=80] the characters width\n   * @param {number} [lines=24] the number of lines\n   * @param {number} [width=640] the pixel width\n   * @param {number} [height=480] the pixel height\n   * @param {string} [type=xterm] the terminal type\n   * @param {Map<string, string>} [environment] environment properties to pass to the shell\n   */\n  constructor(cols, lines, width, height, type, environment) {\n    this.cols = cols || 80;\n    this.lines = lines || 24;\n    this.width = width || 640;\n    this.height = height || 480;\n    this.type = type || \"xterm\";\n    this.environment =\n      environment instanceof Map ? environment : objectToStringMap(environment);\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.type) {\n      result[\"term\"] = this.type;\n    }\n    if (this.cols) {\n      result[\"cols\"] = this.cols;\n    }\n    if (this.lines) {\n      result[\"lines\"] = this.lines;\n    }\n    if (this.width) {\n      result[\"width\"] = this.width;\n    }\n    if (this.height) {\n      result[\"height\"] = this.height;\n    }\n    if (this.environment instanceof Map && this.environment.size > 0) {\n      result[\"environment\"] = stringMapToObject(this.environment);\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshTerminalSettings} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshTerminalSettings#toJsonEncoding} does.\n   *\n   * @param {string} json the JSON to parse\n   * @returns {module:domain~SshTerminalSettings} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const result = new SshTerminalSettings();\n    if (json) {\n      const obj = JSON.parse(json);\n      if (obj[\"term\"]) {\n        result.type = obj[\"term\"];\n      }\n      if (obj[\"cols\"]) {\n        result.cols = obj[\"cols\"];\n      }\n      if (obj[\"lines\"]) {\n        result.lines = obj[\"lines\"];\n      }\n      if (obj[\"width\"]) {\n        result.width = obj[\"width\"];\n      }\n      if (obj[\"height\"]) {\n        result.height = obj[\"height\"];\n      }\n      if (obj[\"environment\"]) {\n        result.environment = objectToStringMap(obj[\"environment\"]);\n      }\n    }\n    return result;\n  }\n}\n\nexport default SshTerminalSettings;\n","import SshCommand from \"./sshCommand\";\nimport SshTerminalSettings from \"./sshTerminalSettings\";\n\n/** The command for attaching to a SSH terminal shell. */\nexport const SolarSshCommandAttachSsh = \"attach-ssh\";\n\n/**\n * SSH command for attaching to a SSH terminal shell.\n */\nclass AttachSshCommand extends SshCommand {\n  /**\n   * Constructor.\n   *\n   * @param {string} authorization a pre-computed SNWS2 authorization header, which must match\n   *        exactly a `GET` request to the `/solaruser/api/v1/sec/nodes/meta/:nodeId`\n   *        path using the provided authorization date and, node ID.\n   * @param {Date|number} authorizationDate the date used in the `authorization` value\n   * @param {string} username the SSH username to use\n   * @param {string} password the SSH password to use\n   * @param {SshTerminalSettings} [terminalSettings] optional terminal settings to use\n   */\n  constructor(\n    authorization,\n    authorizationDate,\n    username,\n    password,\n    terminalSettings\n  ) {\n    const data = {};\n    data[\"authorization\"] = authorization;\n    data[\"authorization-date\"] =\n      authorizationDate instanceof Date\n        ? authorizationDate.getTime()\n        : authorizationDate;\n    data[\"username\"] = username;\n    data[\"password\"] = password;\n    if (terminalSettings instanceof SshTerminalSettings) {\n      const termOpts = JSON.parse(terminalSettings.toJsonEncoding());\n      for (const prop of Object.keys(termOpts)) {\n        if (data[prop] === undefined) {\n          data[prop] = termOpts[prop];\n        }\n      }\n    }\n    super(SolarSshCommandAttachSsh, data);\n  }\n}\n\nexport default AttachSshCommand;\n","/** @module domain */\n\nimport { ComparableEnum } from \"solarnetwork-api-core\";\n\n/**\n * A named socket close code.\n */\nclass SshCloseCode extends ComparableEnum {\n  /**\n   * Constructor.\n   *\n   * @param {string} name the name\n   * @param {value} value the value\n   */\n  constructor(name, value) {\n    super(name, value);\n    if (this.constructor === SshCloseCode) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get the {@link SshCloseCodes} values.\n   *\n   * @inheritdoc\n   */\n  static enumValues() {\n    return SshCloseCodeValues;\n  }\n}\n\nconst SshCloseCodeValues = Object.freeze([\n  new SshCloseCode(\"AUTHENTICATION_FAILURE\", 4000)\n]);\n\n/**\n * The enumeration of supported SshCloseCode values.\n *\n * @readonly\n * @enum {SshCloseCode}\n * @property {SshCloseCode} AUTHENTICATION_FAILURE an authentication failure\n */\nconst SshCloseCodes = SshCloseCode.enumsValue(SshCloseCodeValues);\n\nexport default SshCloseCodes;\nexport { SshCloseCode };\n","/** @module domain */\n\n/**\n * A SolarSSH session object.\n */\nclass SshSession {\n  /**\n   * Constructor.\n   *\n   * @param {Date} created the creation date\n   * @param {string} sessionId the unique session ID\n   * @param {number} nodeId the node ID\n   * @param {string} sshHost the SSH host name\n   * @param {number} sshPort the SSH port\n   * @param {number} reverseSshPort the reverse SSH port\n   * @param {number} [startInstructionId] the <code>StartRemoteSsh</code> instruction ID\n   * @param {number} [stopInstructionId] the <code>StopRemoteSsh</code> instruction ID\n   */\n  constructor(\n    created,\n    sessionId,\n    nodeId,\n    sshHost,\n    sshPort,\n    reverseSshPort,\n    startInstructionId,\n    stopInstructionId\n  ) {\n    this.created = created;\n    this.sessionId = sessionId;\n    this.nodeId = nodeId;\n    this.sshHost = sshHost;\n    this.sshPort = sshPort;\n    this.reverseSshPort = reverseSshPort;\n    this.startInstructionId = startInstructionId;\n    this.stopInstructionId = stopInstructionId;\n    if (this.constructor === SshSession) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.sessionId) {\n      result[\"sessionId\"] = this.sessionId;\n    }\n    if (this.created) {\n      result[\"created\"] = this.created.getTime();\n    }\n    if (this.nodeId) {\n      result[\"nodeId\"] = this.nodeId;\n    }\n    if (this.sshHost) {\n      result[\"host\"] = this.sshHost;\n    }\n    if (this.sshPort) {\n      result[\"port\"] = this.sshPort;\n    }\n    if (this.reverseSshPort) {\n      result[\"reversePort\"] = this.reverseSshPort;\n    }\n    if (this.startInstructionId) {\n      result[\"startInstructionId\"] = this.startInstructionId;\n    }\n    if (this.stopInstructionId) {\n      result[\"stopInstructionId\"] = this.stopInstructionId;\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshSession} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshSession#toJsonEncoding} does.\n   *\n   * @param {string|Object} json the JSON to parse, or a parsed JSON object\n   * @returns {module:domain~SshSession} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const args = [];\n    if (json) {\n      const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n      if (obj.created) {\n        args.push(new Date(obj.created));\n      } else {\n        args.push(new Date());\n      }\n      args.push(obj.sessionId || \"\");\n      args.push(obj.nodeId || null);\n      args.push(obj.host || \"\");\n      args.push(obj.port || null);\n      args.push(obj.reversePort || null);\n      args.push(obj.startInstructionId);\n      args.push(obj.stopInstructionId);\n    }\n    return new SshSession(...args);\n  }\n}\n\nexport default SshSession;\n","/** @module net */\n\nimport {\n  AuthorizationV2Builder,\n  Environment,\n  NodeInstructionUrlHelperMixin,\n  NodeMetadataUrlHelperMixin,\n  NodeUrlHelperMixin,\n  UrlHelper,\n  UserUrlHelperMixin\n} from \"solarnetwork-api-core\";\n\n/** The SolarSsh default path. */\nexport const SolarSshDefaultPath = \"\";\n\n/** The {@link UrlHelper} parameters key for the SolarSsh path. */\nexport const SolarSshPathKey = \"solarSshPath\";\n\n/** The SolarSsh REST API path. */\nexport const SolarSshApiPathV1 = \"/api/v1\";\n\n/** The SolarSsh WebSocket path for a terminal connection. */\nexport const SolarSshTerminalWebSocketPath = \"/ssh\";\n\n/** The sub-protocol to use for SolarSSH WebSocket connections. */\nexport const SolarSshTerminalWebSocketSubProtocol = \"solarssh\";\n\n/** An {@link UrlHelper} parameter key for a {@link SshSession} instance. */\nexport const SshSessionKey = \"sshSession\";\n\n/** The node instruction for initiating a SolarSSH connection. */\nexport const StartRemoteSshInstructionName = \"StartRemoteSsh\";\n\n/** The node instruction for closing a SolarSSH connection. */\nexport const StopRemoteSshInstructionName = \"StopRemoteSsh\";\n\n/**\n * UrlHelper that supports instructions and node metadata.\n */\nclass InstructionUrlHelper extends NodeInstructionUrlHelperMixin(\n  NodeMetadataUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)))\n) {}\n\n/**\n * Create a SshUrlHelperMixin class.\n *\n * @exports net\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~SshUrlHelperMixin} the mixin class\n */\nconst SshUrlHelperMixin = superclass =>\n  /**\n   * A mixin class that adds SolarSsh specific support to {@link UrlHelper}.\n   *\n   * @mixin\n   * @alias module:net~SshUrlHelperMixin\n   */\n  class extends superclass {\n    /**\n     * Constructor.\n     *\n     * @param {*} args any number of arguments, but the first argument is assumed to be either an {@link Environment}\n     *                 instance or a simple object that serves as the SolarSSH environment\n     */\n    constructor(...args) {\n      const env =\n        args && args[0]\n          ? args[0] instanceof Environment\n            ? args[0]\n            : new Environment(args[0])\n          : new Environment({\n              tls: true,\n              host: \"ssh.solarnetwork.net\",\n              port: 8443,\n              solarSshPath: \"\"\n            });\n      if (!args) {\n        args = [];\n      }\n      args[0] = env;\n      super(...args);\n      this._instructionUrlHelper = new InstructionUrlHelper();\n      this._instructionAuthBuilder = new AuthorizationV2Builder(\n        null,\n        this._instructionUrlHelper\n      );\n    }\n\n    /**\n     * A SSH session object.\n     *\n     * @type {SshSession}\n     */\n    get sshSession() {\n      return this.parameter(SshSessionKey);\n    }\n\n    set sshSession(sshSession) {\n      this.parameter(SshSessionKey, sshSession);\n    }\n\n    /**\n     * Set the node ID.\n     * @override\n     * @inheritdoc\n     */\n    set nodeId(nodeId) {\n      super.nodeId = nodeId;\n      this._instructionUrlHelper.nodeId = nodeId;\n    }\n\n    /**\n     * Get the node ID.\n     * @override\n     * @inheritdoc\n     */\n    get nodeId() {\n      return super.nodeId;\n    }\n\n    /**\n     * Get the environment used for instruction URL pre-authorization values.\n     *\n     * @type {Environment}\n     */\n    get nodeUrlHelperEnvironment() {\n      return this._instructionUrlHelper.environment;\n    }\n\n    set nodeUrlHelperEnvironment(environment) {\n      this._instructionUrlHelper.environment = environment;\n      this._instructionAuthBuilder.environment = environment;\n    }\n\n    /**\n     * Get the auth builder used for instruction URL pre-authorization values.\n     *\n     * @type {AuthorizationV2Builder}\n     */\n    get nodeInstructionAuthBuilder() {\n      return this._instructionAuthBuilder;\n    }\n\n    /**\n     * Shortcut for getting the SSH session ID from the {@link module:domain~SshSession#session} property.\n     *\n     * @alias SshSession#sessionId\n     * @readonly\n     * @type {string}\n     */\n    get sshSessionId() {\n      const session = this.sshSession;\n      return session ? session.sessionId : undefined;\n    }\n\n    /**\n     * Get the base URL to the SolarSSH v1 REST API.\n     *\n     * The returned URL uses the configured environment to resolve\n     * the <code>hostUrl</code>, the <code>solarSshPath</code> context path.\n     *\n     * @returns {string} the base URL to SolarSSH\n     */\n    baseUrl() {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      return this.hostUrl() + path + SolarSshApiPathV1;\n    }\n\n    /**\n     * Get the URL to the SolarSSH WebSocket termainl connection to the configured SolarNode.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the WebSocket terminal URL\n     */\n    terminalWebSocketUrl(sessionId) {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.hostWebSocketUrl() +\n        path +\n        SolarSshTerminalWebSocketPath +\n        \"?sessionId=\" +\n        encodeURIComponent(sessId)\n      );\n    }\n\n    /**\n     * Get the URL to the SolarSSH HTTP proxy to the configured SolarNode.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the HTTP proxy URL\n     */\n    httpProxyUrl(sessionId) {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.hostUrl() + path + \"/nodeproxy/\" + encodeURIComponent(sessId) + \"/\"\n      );\n    }\n\n    /**\n     * Generate a URL for creating a new SolarSSH session.\n     *\n     * @param {number} [nodeId] the node ID to connect to; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {string} the URL\n     */\n    createSshSessionUrl(nodeId) {\n      const node = nodeId || this.nodeId;\n      return this.baseUrl() + \"/ssh/session/new?nodeId=\" + node;\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     *\n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     *\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    createSshSessionAuthBuilder(nodeId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"GET\")\n        .url(this._instructionUrlHelper.viewPendingInstructionsUrl(nodeId));\n    }\n\n    /**\n     * Generate a URL for starting a SolarSSH session.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    startSshSessionUrl(sessionId) {\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.baseUrl() + \"/ssh/session/\" + encodeURIComponent(sessId) + \"/start\"\n      );\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the start session request.\n     *\n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL  with the <code>StartRemoteSsh</code> instruction.\n     *\n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    startSshSessionAuthBuilder(sshSession, nodeId) {\n      const session = sshSession || this.sshSession || {};\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"POST\")\n        .contentType(\"application/x-www-form-urlencoded\")\n        .url(\n          this._instructionUrlHelper.queueInstructionUrl(\n            StartRemoteSshInstructionName,\n            [\n              { name: \"host\", value: session.sshHost },\n              { name: \"user\", value: session.sessionId },\n              { name: \"port\", value: session.sshPort },\n              { name: \"rport\", value: session.reverseSshPort }\n            ],\n            nodeId\n          )\n        );\n    }\n\n    /**\n     * Generate a URL for stopping a SolarSSH session.\n     *\n     * @param {string} [sessionId] the {@link module:domain/sshSession~SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    stopSshSessionUrl(sessionId) {\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.baseUrl() + \"/ssh/session/\" + encodeURIComponent(sessId) + \"/stop\"\n      );\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the stop session request.\n     *\n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL with the <code>StopRemoteSsh</code> instruction.\n     *\n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    stopSshSessionAuthBuilder(sshSession, nodeId) {\n      const session = sshSession || this.sshSession || {};\n      const node = nodeId || this.nodeId;\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"POST\")\n        .contentType(\"application/x-www-form-urlencoded\")\n        .url(\n          this._instructionUrlHelper.queueInstructionUrl(\n            StopRemoteSshInstructionName,\n            [\n              { name: \"host\", value: session.sshHost },\n              { name: \"user\", value: session.sessionId },\n              { name: \"port\", value: session.sshPort },\n              { name: \"rport\", value: session.reverseSshPort }\n            ],\n            node\n          )\n        );\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StartRemoteSsh</code> instruction.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStartRemoteSshInstructionUrl(instructionId) {\n      const session = this.sshSession || {};\n      const instrId = instructionId || session.startInstructionId;\n      return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StartRemoteSsh</code> instruction.\n     *\n     * <p>The returned builder will be configured with the same URL returned from\n     * {@link module:net~SshUrlHelperMixin#viewStartRemoteSshInstructionUrl}.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    viewStartRemoteSshInstructionAuthBuilder(instructionId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .url(this.viewStartRemoteSshInstructionUrl(instructionId));\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StopRemoteSsh</code> instruction.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStopRemoteSshInstructionUrl(instructionId) {\n      const session = this.sshSession || {};\n      const instrId = instructionId || session.stopInstructionId;\n      return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StopRemoteSsh</code> instruction.\n     *\n     * <p>The returned builder will be configured with the same URL returned from\n     * {@link module:net~SshUrlHelperMixin#viewStopRemoteSshInstructionUrl}.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>stopInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    viewStopRemoteSshInstructionAuthBuilder(instructionId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .url(this.viewStopRemoteSshInstructionUrl(instructionId));\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     *\n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     *\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    connectTerminalWebSocketAuthBuilder(nodeId) {\n      const node = nodeId || this.nodeId;\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"GET\")\n        .url(this._instructionUrlHelper.viewNodeMetadataUrl(node));\n    }\n  };\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~SshUrlHelperMixin} and\n * {@link NodeUrlHelperMixin} mixins.\n *\n * @mixes SshUrlHelperMixin\n * @mixes NodeUrlHelperMixin\n * @extends UrlHelper\n */\nclass SshUrlHelper extends SshUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)) {}\n\nexport default SshUrlHelperMixin;\nexport { SshUrlHelper };\n"],"names":["SshCommand","command","data","constructor","Object","freeze","result","toJsonEncoding","dataJson","JSON","parse","stringify","json","dataParser","obj","SshTerminalSettings","cols","lines","width","height","type","environment","Map","objectToStringMap","size","stringMapToObject","SolarSshCommandAttachSsh","AttachSshCommand","authorization","authorizationDate","username","password","terminalSettings","Date","getTime","termOpts","keys","prop","undefined","SshCloseCode","name","value","SshCloseCodeValues","ComparableEnum","SshCloseCodes","enumsValue","SshSession","created","sessionId","nodeId","sshHost","sshPort","reverseSshPort","startInstructionId","stopInstructionId","args","push","host","port","reversePort","SolarSshDefaultPath","SolarSshPathKey","SolarSshApiPathV1","SolarSshTerminalWebSocketPath","SolarSshTerminalWebSocketSubProtocol","SshSessionKey","StartRemoteSshInstructionName","StopRemoteSshInstructionName","InstructionUrlHelper","NodeInstructionUrlHelperMixin","NodeMetadataUrlHelperMixin","UserUrlHelperMixin","NodeUrlHelperMixin","UrlHelper","SshUrlHelperMixin","superclass","env","Environment","tls","solarSshPath","_instructionUrlHelper","_instructionAuthBuilder","AuthorizationV2Builder","path","hostUrl","sessId","sshSessionId","hostWebSocketUrl","encodeURIComponent","node","baseUrl","reset","snDate","method","url","viewPendingInstructionsUrl","sshSession","session","contentType","queueInstructionUrl","instructionId","instrId","viewInstructionUrl","viewStartRemoteSshInstructionUrl","viewStopRemoteSshInstructionUrl","viewNodeMetadataUrl","parameter","SshUrlHelper"],"mappings":"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"}