{"version":3,"sources":["../src/domain/sshCommand.js","../src/domain/sshTerminalSettings.js","../src/domain/attachSshCommand.js","../src/domain/sshCloseCode.js","../src/domain/sshSession.js","../src/net/sshUrlHelperMixin.js"],"names":["SshCommand","command","data","this","constructor","Object","freeze","result","toJsonEncoding","dataJson","JSON","parse","stringify","json","dataParser","obj","SshTerminalSettings","cols","lines","width","height","type","environment","Map","objectToStringMap","size","stringMapToObject","SolarSshCommandAttachSsh","AttachSshCommand","authorization","authorizationDate","username","password","terminalSettings","Date","getTime","termOpts","keys","_i","_Object$keys","length","prop","undefined","SshCloseCode","name","value","_assertThisInitialized","_this","ComparableEnum","SshCloseCodeValues","SshCloseCodes","enumsValue","SshSession","created","sessionId","nodeId","sshHost","sshPort","reverseSshPort","startInstructionId","stopInstructionId","args","push","host","port","reversePort","SolarSshDefaultPath","SolarSshPathKey","SolarSshApiPathV1","SolarSshTerminalWebSocketPath","SolarSshTerminalWebSocketSubProtocol","SshSessionKey","StartRemoteSshInstructionName","StopRemoteSshInstructionName","InstructionUrlHelper","NodeInstructionUrlHelperMixin","NodeMetadataUrlHelperMixin","UserUrlHelperMixin","NodeUrlHelperMixin","UrlHelper","SshUrlHelperMixin","superclass","Array","_len","_key","arguments","env","Environment","tls","solarSshPath","_instructionUrlHelper","_instructionAuthBuilder","AuthorizationV2Builder","path","hostUrl","sessId","sshSessionId","hostWebSocketUrl","encodeURIComponent","node","baseUrl","reset","snDate","method","url","viewPendingInstructionsUrl","sshSession","session","contentType","queueInstructionUrl","instructionId","instrId","viewInstructionUrl","viewStartRemoteSshInstructionUrl","viewStopRemoteSshInstructionUrl","viewNodeMetadataUrl","parameter","SshUrlHelper"],"mappings":"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","file":"lib/solarnetwork-api-ssh.es.min.js.map","sourcesContent":["/**\n * A command with data.\n */\nclass SshCommand {\n  /**\n   * Constructor.\n   *\n   * @param {string} command the command\n   * @param {*} [data] optional data to associate with the command\n   */\n  constructor(command, data) {\n    this.command = command;\n    this.data = data;\n    if (this.constructor === SshCommand) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * If <code>data</code> has a <code>toJsonEncoding()</code> function, that will be invoked\n   * and used in the result. Otherwise the <code>data</code> object will be serialized to\n   * JSON via <code>JSON.stringify()</code>.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.command) {\n      result[\"cmd\"] = this.command;\n    }\n    const data = this.data;\n    if (data && data.toJsonEncoding) {\n      const dataJson = data.toJsonEncoding();\n      result[\"data\"] = JSON.parse(dataJson);\n    } else if (data) {\n      result[\"data\"] = data;\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshCommand} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshCommand#toJsonEncoding} does.\n   *\n   * @param {string} json the JSON to parse\n   * @param {function} [dataParser] if provided, a function that accepts a string of JSON and returns\n   *                                an object representation of that data; if not provided then a\n   *                                simple object parsed via <code>JSON.parse()</code> will be used\n   * @returns {module:domain~SshCommand} the command instance\n   */\n  static fromJsonEncoding(json, dataParser) {\n    let command, data;\n    if (json) {\n      const obj = JSON.parse(json);\n      command = obj[\"cmd\"];\n      data = obj[\"data\"];\n      if (data && dataParser) {\n        data = dataParser(JSON.stringify(data));\n      }\n    }\n    return new SshCommand(command, data);\n  }\n}\n\nexport default SshCommand;\n","/** @module domain */\n\nimport { stringMapToObject, objectToStringMap } from \"solarnetwork-api-core\";\n\n/**\n * Settings for a SSH terminal.\n */\nclass SshTerminalSettings {\n  /**\n   * Constructor.\n   *\n   * @param {number} [cols=80] the characters width\n   * @param {number} [lines=24] the number of lines\n   * @param {number} [width=640] the pixel width\n   * @param {number} [height=480] the pixel height\n   * @param {string} [type=xterm] the terminal type\n   * @param {Map<string, string>} [environment] environment properties to pass to the shell\n   */\n  constructor(cols, lines, width, height, type, environment) {\n    this.cols = cols || 80;\n    this.lines = lines || 24;\n    this.width = width || 640;\n    this.height = height || 480;\n    this.type = type || \"xterm\";\n    this.environment =\n      environment instanceof Map ? environment : objectToStringMap(environment);\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.type) {\n      result[\"term\"] = this.type;\n    }\n    if (this.cols) {\n      result[\"cols\"] = this.cols;\n    }\n    if (this.lines) {\n      result[\"lines\"] = this.lines;\n    }\n    if (this.width) {\n      result[\"width\"] = this.width;\n    }\n    if (this.height) {\n      result[\"height\"] = this.height;\n    }\n    if (this.environment instanceof Map && this.environment.size > 0) {\n      result[\"environment\"] = stringMapToObject(this.environment);\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshTerminalSettings} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshTerminalSettings#toJsonEncoding} does.\n   *\n   * @param {string} json the JSON to parse\n   * @returns {module:domain~SshTerminalSettings} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const result = new SshTerminalSettings();\n    if (json) {\n      const obj = JSON.parse(json);\n      if (obj[\"term\"]) {\n        result.type = obj[\"term\"];\n      }\n      if (obj[\"cols\"]) {\n        result.cols = obj[\"cols\"];\n      }\n      if (obj[\"lines\"]) {\n        result.lines = obj[\"lines\"];\n      }\n      if (obj[\"width\"]) {\n        result.width = obj[\"width\"];\n      }\n      if (obj[\"height\"]) {\n        result.height = obj[\"height\"];\n      }\n      if (obj[\"environment\"]) {\n        result.environment = objectToStringMap(obj[\"environment\"]);\n      }\n    }\n    return result;\n  }\n}\n\nexport default SshTerminalSettings;\n","import SshCommand from \"./sshCommand\";\nimport SshTerminalSettings from \"./sshTerminalSettings\";\n\n/** The command for attaching to a SSH terminal shell. */\nexport const SolarSshCommandAttachSsh = \"attach-ssh\";\n\n/**\n * SSH command for attaching to a SSH terminal shell.\n */\nclass AttachSshCommand extends SshCommand {\n  /**\n   * Constructor.\n   *\n   * @param {string} authorization a pre-computed SNWS2 authorization header, which must match\n   *        exactly a `GET` request to the `/solaruser/api/v1/sec/nodes/meta/:nodeId`\n   *        path using the provided authorization date and, node ID.\n   * @param {Date|number} authorizationDate the date used in the `authorization` value\n   * @param {string} username the SSH username to use\n   * @param {string} password the SSH password to use\n   * @param {SshTerminalSettings} [terminalSettings] optional terminal settings to use\n   */\n  constructor(\n    authorization,\n    authorizationDate,\n    username,\n    password,\n    terminalSettings\n  ) {\n    const data = {};\n    data[\"authorization\"] = authorization;\n    data[\"authorization-date\"] =\n      authorizationDate instanceof Date\n        ? authorizationDate.getTime()\n        : authorizationDate;\n    data[\"username\"] = username;\n    data[\"password\"] = password;\n    if (terminalSettings instanceof SshTerminalSettings) {\n      const termOpts = JSON.parse(terminalSettings.toJsonEncoding());\n      for (const prop of Object.keys(termOpts)) {\n        if (data[prop] === undefined) {\n          data[prop] = termOpts[prop];\n        }\n      }\n    }\n    super(SolarSshCommandAttachSsh, data);\n  }\n}\n\nexport default AttachSshCommand;\n","/** @module domain */\n\nimport { ComparableEnum } from \"solarnetwork-api-core\";\n\n/**\n * A named socket close code.\n */\nclass SshCloseCode extends ComparableEnum {\n  /**\n   * Constructor.\n   *\n   * @param {string} name the name\n   * @param {value} value the value\n   */\n  constructor(name, value) {\n    super(name, value);\n    if (this.constructor === SshCloseCode) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get the {@link SshCloseCodes} values.\n   *\n   * @inheritdoc\n   */\n  static enumValues() {\n    return SshCloseCodeValues;\n  }\n}\n\nconst SshCloseCodeValues = Object.freeze([\n  new SshCloseCode(\"AUTHENTICATION_FAILURE\", 4000)\n]);\n\n/**\n * The enumeration of supported SshCloseCode values.\n *\n * @readonly\n * @enum {SshCloseCode}\n * @property {SshCloseCode} AUTHENTICATION_FAILURE an authentication failure\n */\nconst SshCloseCodes = SshCloseCode.enumsValue(SshCloseCodeValues);\n\nexport default SshCloseCodes;\nexport { SshCloseCode };\n","/** @module domain */\n\n/**\n * A SolarSSH session object.\n */\nclass SshSession {\n  /**\n   * Constructor.\n   *\n   * @param {Date} created the creation date\n   * @param {string} sessionId the unique session ID\n   * @param {number} nodeId the node ID\n   * @param {string} sshHost the SSH host name\n   * @param {number} sshPort the SSH port\n   * @param {number} reverseSshPort the reverse SSH port\n   * @param {number} [startInstructionId] the <code>StartRemoteSsh</code> instruction ID\n   * @param {number} [stopInstructionId] the <code>StopRemoteSsh</code> instruction ID\n   */\n  constructor(\n    created,\n    sessionId,\n    nodeId,\n    sshHost,\n    sshPort,\n    reverseSshPort,\n    startInstructionId,\n    stopInstructionId\n  ) {\n    this.created = created;\n    this.sessionId = sessionId;\n    this.nodeId = nodeId;\n    this.sshHost = sshHost;\n    this.sshPort = sshPort;\n    this.reverseSshPort = reverseSshPort;\n    this.startInstructionId = startInstructionId;\n    this.stopInstructionId = stopInstructionId;\n    if (this.constructor === SshSession) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.sessionId) {\n      result[\"sessionId\"] = this.sessionId;\n    }\n    if (this.created) {\n      result[\"created\"] = this.created.getTime();\n    }\n    if (this.nodeId) {\n      result[\"nodeId\"] = this.nodeId;\n    }\n    if (this.sshHost) {\n      result[\"host\"] = this.sshHost;\n    }\n    if (this.sshPort) {\n      result[\"port\"] = this.sshPort;\n    }\n    if (this.reverseSshPort) {\n      result[\"reversePort\"] = this.reverseSshPort;\n    }\n    if (this.startInstructionId) {\n      result[\"startInstructionId\"] = this.startInstructionId;\n    }\n    if (this.stopInstructionId) {\n      result[\"stopInstructionId\"] = this.stopInstructionId;\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshSession} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshSession#toJsonEncoding} does.\n   *\n   * @param {string|Object} json the JSON to parse, or a parsed JSON object\n   * @returns {module:domain~SshSession} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const args = [];\n    if (json) {\n      const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n      if (obj.created) {\n        args.push(new Date(obj.created));\n      } else {\n        args.push(new Date());\n      }\n      args.push(obj.sessionId || \"\");\n      args.push(obj.nodeId || null);\n      args.push(obj.host || \"\");\n      args.push(obj.port || null);\n      args.push(obj.reversePort || null);\n      args.push(obj.startInstructionId);\n      args.push(obj.stopInstructionId);\n    }\n    return new SshSession(...args);\n  }\n}\n\nexport default SshSession;\n","/** @module net */\n\nimport {\n  AuthorizationV2Builder,\n  Environment,\n  NodeInstructionUrlHelperMixin,\n  NodeMetadataUrlHelperMixin,\n  NodeUrlHelperMixin,\n  UrlHelper,\n  UserUrlHelperMixin\n} from \"solarnetwork-api-core\";\n\n/** The SolarSsh default path. */\nexport const SolarSshDefaultPath = \"\";\n\n/** The {@link UrlHelper} parameters key for the SolarSsh path. */\nexport const SolarSshPathKey = \"solarSshPath\";\n\n/** The SolarSsh REST API path. */\nexport const SolarSshApiPathV1 = \"/api/v1\";\n\n/** The SolarSsh WebSocket path for a terminal connection. */\nexport const SolarSshTerminalWebSocketPath = \"/ssh\";\n\n/** The sub-protocol to use for SolarSSH WebSocket connections. */\nexport const SolarSshTerminalWebSocketSubProtocol = \"solarssh\";\n\n/** An {@link UrlHelper} parameter key for a {@link SshSession} instance. */\nexport const SshSessionKey = \"sshSession\";\n\n/** The node instruction for initiating a SolarSSH connection. */\nexport const StartRemoteSshInstructionName = \"StartRemoteSsh\";\n\n/** The node instruction for closing a SolarSSH connection. */\nexport const StopRemoteSshInstructionName = \"StopRemoteSsh\";\n\n/**\n * UrlHelper that supports instructions and node metadata.\n */\nclass InstructionUrlHelper extends NodeInstructionUrlHelperMixin(\n  NodeMetadataUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)))\n) {}\n\n/**\n * Create a SshUrlHelperMixin class.\n *\n * @exports net\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~SshUrlHelperMixin} the mixin class\n */\nconst SshUrlHelperMixin = superclass =>\n  /**\n   * A mixin class that adds SolarSsh specific support to {@link UrlHelper}.\n   *\n   * @mixin\n   * @alias module:net~SshUrlHelperMixin\n   */\n  class extends superclass {\n    /**\n     * Constructor.\n     *\n     * @param {*} args any number of arguments, but the first argument is assumed to be either an {@link Environment}\n     *                 instance or a simple object that serves as the SolarSSH environment\n     */\n    constructor(...args) {\n      const env =\n        args && args[0]\n          ? args[0] instanceof Environment\n            ? args[0]\n            : new Environment(args[0])\n          : new Environment({\n              tls: true,\n              host: \"ssh.solarnetwork.net\",\n              port: 8443,\n              solarSshPath: \"\"\n            });\n      if (!args) {\n        args = [];\n      }\n      args[0] = env;\n      super(...args);\n      this._instructionUrlHelper = new InstructionUrlHelper();\n      this._instructionAuthBuilder = new AuthorizationV2Builder(\n        null,\n        this._instructionUrlHelper\n      );\n    }\n\n    /**\n     * A SSH session object.\n     *\n     * @type {SshSession}\n     */\n    get sshSession() {\n      return this.parameter(SshSessionKey);\n    }\n\n    set sshSession(sshSession) {\n      this.parameter(SshSessionKey, sshSession);\n    }\n\n    /**\n     * Set the node ID.\n     * @override\n     * @inheritdoc\n     */\n    set nodeId(nodeId) {\n      super.nodeId = nodeId;\n      this._instructionUrlHelper.nodeId = nodeId;\n    }\n\n    /**\n     * Get the node ID.\n     * @override\n     * @inheritdoc\n     */\n    get nodeId() {\n      return super.nodeId;\n    }\n\n    /**\n     * Get the environment used for instruction URL pre-authorization values.\n     *\n     * @type {Environment}\n     */\n    get nodeUrlHelperEnvironment() {\n      return this._instructionUrlHelper.environment;\n    }\n\n    set nodeUrlHelperEnvironment(environment) {\n      this._instructionUrlHelper.environment = environment;\n      this._instructionAuthBuilder.environment = environment;\n    }\n\n    /**\n     * Get the auth builder used for instruction URL pre-authorization values.\n     *\n     * @type {AuthorizationV2Builder}\n     */\n    get nodeInstructionAuthBuilder() {\n      return this._instructionAuthBuilder;\n    }\n\n    /**\n     * Shortcut for getting the SSH session ID from the {@link module:domain~SshSession#session} property.\n     *\n     * @alias SshSession#sessionId\n     * @readonly\n     * @type {string}\n     */\n    get sshSessionId() {\n      const session = this.sshSession;\n      return session ? session.sessionId : undefined;\n    }\n\n    /**\n     * Get the base URL to the SolarSSH v1 REST API.\n     *\n     * The returned URL uses the configured environment to resolve\n     * the <code>hostUrl</code>, the <code>solarSshPath</code> context path.\n     *\n     * @returns {string} the base URL to SolarSSH\n     */\n    baseUrl() {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      return this.hostUrl() + path + SolarSshApiPathV1;\n    }\n\n    /**\n     * Get the URL to the SolarSSH WebSocket termainl connection to the configured SolarNode.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the WebSocket terminal URL\n     */\n    terminalWebSocketUrl(sessionId) {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.hostWebSocketUrl() +\n        path +\n        SolarSshTerminalWebSocketPath +\n        \"?sessionId=\" +\n        encodeURIComponent(sessId)\n      );\n    }\n\n    /**\n     * Get the URL to the SolarSSH HTTP proxy to the configured SolarNode.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the HTTP proxy URL\n     */\n    httpProxyUrl(sessionId) {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.hostUrl() + path + \"/nodeproxy/\" + encodeURIComponent(sessId) + \"/\"\n      );\n    }\n\n    /**\n     * Generate a URL for creating a new SolarSSH session.\n     *\n     * @param {number} [nodeId] the node ID to connect to; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {string} the URL\n     */\n    createSshSessionUrl(nodeId) {\n      const node = nodeId || this.nodeId;\n      return this.baseUrl() + \"/ssh/session/new?nodeId=\" + node;\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     *\n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     *\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    createSshSessionAuthBuilder(nodeId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"GET\")\n        .url(this._instructionUrlHelper.viewPendingInstructionsUrl(nodeId));\n    }\n\n    /**\n     * Generate a URL for starting a SolarSSH session.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    startSshSessionUrl(sessionId) {\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.baseUrl() + \"/ssh/session/\" + encodeURIComponent(sessId) + \"/start\"\n      );\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the start session request.\n     *\n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL  with the <code>StartRemoteSsh</code> instruction.\n     *\n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    startSshSessionAuthBuilder(sshSession, nodeId) {\n      const session = sshSession || this.sshSession || {};\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"POST\")\n        .contentType(\"application/x-www-form-urlencoded\")\n        .url(\n          this._instructionUrlHelper.queueInstructionUrl(\n            StartRemoteSshInstructionName,\n            [\n              { name: \"host\", value: session.sshHost },\n              { name: \"user\", value: session.sessionId },\n              { name: \"port\", value: session.sshPort },\n              { name: \"rport\", value: session.reverseSshPort }\n            ],\n            nodeId\n          )\n        );\n    }\n\n    /**\n     * Generate a URL for stopping a SolarSSH session.\n     *\n     * @param {string} [sessionId] the {@link module:domain/sshSession~SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    stopSshSessionUrl(sessionId) {\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.baseUrl() + \"/ssh/session/\" + encodeURIComponent(sessId) + \"/stop\"\n      );\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the stop session request.\n     *\n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL with the <code>StopRemoteSsh</code> instruction.\n     *\n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    stopSshSessionAuthBuilder(sshSession, nodeId) {\n      const session = sshSession || this.sshSession || {};\n      const node = nodeId || this.nodeId;\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"POST\")\n        .contentType(\"application/x-www-form-urlencoded\")\n        .url(\n          this._instructionUrlHelper.queueInstructionUrl(\n            StopRemoteSshInstructionName,\n            [\n              { name: \"host\", value: session.sshHost },\n              { name: \"user\", value: session.sessionId },\n              { name: \"port\", value: session.sshPort },\n              { name: \"rport\", value: session.reverseSshPort }\n            ],\n            node\n          )\n        );\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StartRemoteSsh</code> instruction.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStartRemoteSshInstructionUrl(instructionId) {\n      const session = this.sshSession || {};\n      const instrId = instructionId || session.startInstructionId;\n      return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StartRemoteSsh</code> instruction.\n     *\n     * <p>The returned builder will be configured with the same URL returned from\n     * {@link module:net~SshUrlHelperMixin#viewStartRemoteSshInstructionUrl}.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    viewStartRemoteSshInstructionAuthBuilder(instructionId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .url(this.viewStartRemoteSshInstructionUrl(instructionId));\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StopRemoteSsh</code> instruction.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStopRemoteSshInstructionUrl(instructionId) {\n      const session = this.sshSession || {};\n      const instrId = instructionId || session.stopInstructionId;\n      return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StopRemoteSsh</code> instruction.\n     *\n     * <p>The returned builder will be configured with the same URL returned from\n     * {@link module:net~SshUrlHelperMixin#viewStopRemoteSshInstructionUrl}.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>stopInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    viewStopRemoteSshInstructionAuthBuilder(instructionId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .url(this.viewStopRemoteSshInstructionUrl(instructionId));\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     *\n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     *\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    connectTerminalWebSocketAuthBuilder(nodeId) {\n      const node = nodeId || this.nodeId;\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"GET\")\n        .url(this._instructionUrlHelper.viewNodeMetadataUrl(node));\n    }\n  };\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~SshUrlHelperMixin} and\n * {@link NodeUrlHelperMixin} mixins.\n *\n * @mixes SshUrlHelperMixin\n * @mixes NodeUrlHelperMixin\n * @extends UrlHelper\n */\nclass SshUrlHelper extends SshUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)) {}\n\nexport default SshUrlHelperMixin;\nexport { SshUrlHelper };\n"]}