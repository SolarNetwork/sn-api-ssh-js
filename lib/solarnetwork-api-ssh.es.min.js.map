{"version":3,"sources":["../src/domain/sshCommand.js","../src/domain/sshTerminalSettings.js","../src/domain/attachSshCommand.js","../src/domain/sshCloseCode.js","../src/domain/sshSession.js","../src/net/sshUrlHelperMixin.js"],"names":["SshCommand","command","data","this","constructor","freeze","result","toJsonEncoding","dataJson","JSON","parse","stringify","json","dataParser","obj","SshTerminalSettings","cols","lines","width","height","type","environment","Map","objectToStringMap","size","stringMapToObject","SolarSshCommandAttachSsh","AttachSshCommand","authorization","authorizationDate","username","password","terminalSettings","Date","getTime","termOpts","_step","Object","keys","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","prop","value","undefined","SshCloseCode","name","_this","ComparableEnum","SshCloseCodeValues","SshCloseCodes","enumsValue","SshSession","created","sessionId","nodeId","sshHost","sshPort","reverseSshPort","startInstructionId","stopInstructionId","args","push","host","port","reversePort","concat","SolarSshDefaultPath","SolarSshPathKey","SolarSshApiPathV1","SolarSshTerminalWebSocketPath","SolarSshTerminalWebSocketSubProtocol","SshSessionKey","StartRemoteSshInstructionName","StopRemoteSshInstructionName","InstructionUrlHelper","NodeInstructionUrlHelperMixin","NodeMetadataUrlHelperMixin","UserUrlHelperMixin","NodeUrlHelperMixin","UrlHelper","SshUrlHelperMixin","superclass","Array","_len","_key","arguments","env","Environment","_instructionUrlHelper","_instructionAuthBuilder","AuthorizationV2Builder","_this2","path","hostUrl","sessId","sshSessionId","hostWebSocketUrl","encodeURIComponent","node","baseUrl","reset","snDate","method","url","viewPendingInstructionsUrl","sshSession","session","contentType","queueInstructionUrl","instructionId","instrId","viewInstructionUrl","viewStartRemoteSshInstructionUrl","viewStopRemoteSshInstructionUrl","viewNodeMetadataUrl","parameter","SshUrlHelper"],"mappings":"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","file":"lib/solarnetwork-api-ssh.es.min.js.map","sourcesContent":["/**\n * A command with data.\n */\nclass SshCommand {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} command the command\n     * @param {*} [data] optional data to associate with the command\n     */\n    constructor(command, data) {\n        this.command = command;\n        this.data = data;\n        if ( this.constructor === SshCommand ) {\n            Object.freeze(this);\n        }\n    }\n    \n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * If <code>data</code> has a <code>toJsonEncoding()</code> function, that will be invoked\n     * and used in the result. Otherwise the <code>data</code> object will be serialized to\n     * JSON via <code>JSON.stringify()</code>.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n        const result = {};\n        if ( this.command ) {\n            result['cmd'] = this.command;\n        }\n        const data = this.data;\n        if ( data && data.toJsonEncoding ) {\n            const dataJson = data.toJsonEncoding();\n            result['data'] = JSON.parse(dataJson);\n        } else if ( data ) {\n            result['data'] = data;\n        }\n\n\t\treturn JSON.stringify(result);\n    }\n\n    /**\n     * Parse a JSON string into a {@link module:domain~SshCommand} instance.\n     * \n     * The JSON must be encoded the same way {@link module:domain~SshCommand#toJsonEncoding} does.\n     * \n     * @param {string} json the JSON to parse\n     * @param {function} [dataParser] if provided, a function that accepts a string of JSON and returns\n     *                                an object representation of that data; if not provided then a \n     *                                simple object parsed via <code>JSON.parse()</code> will be used\n     * @returns {module:domain~SshCommand} the command instance \n     */\n    static fromJsonEncoding(json, dataParser) {\n        let command, data;\n        if ( json ) {\n            const obj = JSON.parse(json);\n            command = obj['cmd'];\n            data = obj['data'];\n            if ( data && dataParser ) {\n                data = dataParser(JSON.stringify(data));\n            }\n        }\n        return new SshCommand(command, data);\n    }\n}\n\nexport default SshCommand;\n","/** @module domain */\n\nimport { stringMapToObject, objectToStringMap } from 'solarnetwork-api-core';\n\n/**\n * Settings for a SSH terminal.\n */\nclass SshTerminalSettings {\n\n    /**\n     * Constructor.\n     * \n     * @param {number} [cols=80] the characters width\n     * @param {number} [lines=24] the number of lines\n     * @param {number} [width=640] the pixel width\n     * @param {number} [height=480] the pixel height\n     * @param {string} [type=xterm] the terminal type\n     * @param {Map<string, string>} [environment] environment properties to pass to the shell\n     */\n    constructor(cols, lines, width, height, type, environment) {\n        this.cols = cols || 80;\n        this.lines = lines || 24;\n        this.width = width || 640;\n        this.height = height || 480;\n        this.type = type || 'xterm';\n        this.environment = environment instanceof Map ? environment : objectToStringMap(environment);\n    }\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n        const result = {};\n        if ( this.type ) {\n            result['term'] = this.type;\n        }\n        if ( this.cols ) {\n            result['cols'] = this.cols;\n        }\n        if ( this.lines ) {\n            result['lines'] = this.lines;\n        }\n        if ( this.width ) {\n            result['width'] = this.width;\n        }\n        if ( this.height ) {\n            result['height'] = this.height;\n        }\n        if ( this.environment instanceof Map && this.environment.size > 0 ) {\n            result['environment'] = stringMapToObject(this.environment);\n        }\n\n\t\treturn JSON.stringify(result);\n    }\n\n    /**\n     * Parse a JSON string into a {@link module:domain~SshTerminalSettings} instance.\n     * \n     * The JSON must be encoded the same way {@link module:domain~SshTerminalSettings#toJsonEncoding} does.\n     * \n     * @param {string} json the JSON to parse\n     * @returns {module:domain~SshTerminalSettings} the session instance \n     */\n    static fromJsonEncoding(json) {\n        const result = new SshTerminalSettings();\n        if ( json ) {\n            const obj = JSON.parse(json);\n            if ( obj['term'] ) {\n                result.type = obj['term'];\n            }\n            if ( obj['cols'] ) {\n                result.cols = obj['cols'];\n            }\n            if ( obj['lines'] ) {\n                result.lines = obj['lines'];\n            }\n            if ( obj['width'] ) {\n                result.width = obj['width'];\n            }\n            if ( obj['height'] ) {\n                result.height = obj['height'];\n            }\n            if ( obj['environment'] ) {\n                result.environment = objectToStringMap(obj['environment']);\n            }\n        }\n        return result;\n    }\n\n}\n\nexport default SshTerminalSettings;\n","import SshCommand from './sshCommand';\nimport SshTerminalSettings from './sshTerminalSettings';\n\n/** The command for attaching to a SSH terminal shell. */\nexport const SolarSshCommandAttachSsh = 'attach-ssh';\n\n/**\n * SSH command for attaching to a SSH terminal shell.\n */\nclass AttachSshCommand extends SshCommand {\n    /**\n     * Constructor.\n     * \n     * @param {string} authorization a pre-computed SNWS2 authorization header, which must match\n     *        exactly a `GET` request to the `/solaruser/api/v1/sec/nodes/meta/:nodeId`\n     *        path using the provided authorization date and, node ID.\n     * @param {Date|number} authorizationDate the date used in the `authorization` value\n     * @param {string} username the SSH username to use\n     * @param {string} password the SSH password to use\n     * @param {SshTerminalSettings} [terminalSettings] optional terminal settings to use\n     */\n    constructor(authorization, authorizationDate, username, password, terminalSettings) {\n        const data = {};\n        data['authorization'] = authorization;\n        data['authorization-date'] = (authorizationDate instanceof Date ? authorizationDate.getTime() : authorizationDate);\n        data['username'] = username;\n        data['password'] = password;\n        if ( terminalSettings instanceof SshTerminalSettings ) {\n            const termOpts = JSON.parse(terminalSettings.toJsonEncoding());\n            for ( const prop of Object.keys(termOpts) ) {\n                if ( data[prop] === undefined ) {\n                    data[prop] = termOpts[prop];\n                }\n            }\n        }\n        super(SolarSshCommandAttachSsh, data);\n    }\n}\n\nexport default AttachSshCommand;\n","/** @module domain */\n\nimport { ComparableEnum } from 'solarnetwork-api-core';\n\n/**\n * A named socket close code.\n */\nclass SshCloseCode extends ComparableEnum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     * @param {value} value the value\n     */\n    constructor(name, value) {\n        super(name, value);\n        if ( this.constructor === SshCloseCode ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link SshCloseCodes} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn SshCloseCodeValues;\n\t}\n\n}\n\nconst SshCloseCodeValues = Object.freeze([\n\tnew SshCloseCode('AUTHENTICATION_FAILURE', 4000),\n]);\n\n/**\n * The enumeration of supported SshCloseCode values.\n * \n * @readonly\n * @enum {SshCloseCode}\n * @property {SshCloseCode} AUTHENTICATION_FAILURE an authentication failure\n */\nconst SshCloseCodes = SshCloseCode.enumsValue(SshCloseCodeValues);\n\nexport default SshCloseCodes;\nexport { SshCloseCode };","/** @module domain */\n\n/**\n * A SolarSSH session object.\n */\nclass SshSession {\n    \n    /**\n     * Constructor.\n     * \n     * @param {Date} created the creation date\n     * @param {string} sessionId the unique session ID\n     * @param {number} nodeId the node ID\n     * @param {string} sshHost the SSH host name\n     * @param {number} sshPort the SSH port\n     * @param {number} reverseSshPort the reverse SSH port\n     * @param {number} [startInstructionId] the <code>StartRemoteSsh</code> instruction ID\n     * @param {number} [stopInstructionId] the <code>StopRemoteSsh</code> instruction ID\n     */\n    constructor(created, sessionId, nodeId, sshHost, sshPort, reverseSshPort,\n            startInstructionId, stopInstructionId) {\n        this.created = created;\n        this.sessionId = sessionId;\n        this.nodeId = nodeId;\n        this.sshHost = sshHost;\n        this.sshPort = sshPort;\n        this.reverseSshPort = reverseSshPort;\n        this.startInstructionId = startInstructionId;\n        this.stopInstructionId = stopInstructionId;\n        if ( this.constructor === SshSession ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n        const result = {};\n        if ( this.sessionId ) {\n            result['sessionId'] = this.sessionId;\n        }\n        if ( this.created ) {\n            result['created'] = this.created.getTime();\n        }\n        if ( this.nodeId ) {\n            result['nodeId'] = this.nodeId;\n        }\n        if ( this.sshHost ) {\n            result['host'] = this.sshHost;\n        }\n        if ( this.sshPort ) {\n            result['port'] = this.sshPort;\n        }\n        if ( this.reverseSshPort ) {\n            result['reversePort'] = this.reverseSshPort;\n        }\n        if ( this.startInstructionId ) {\n            result['startInstructionId'] = this.startInstructionId;\n        }\n        if ( this.stopInstructionId ) {\n            result['stopInstructionId'] = this.stopInstructionId;\n        }\n\n\t\treturn JSON.stringify(result);\n    }\n\n    /**\n     * Parse a JSON string into a {@link module:domain~SshSession} instance.\n     * \n     * The JSON must be encoded the same way {@link module:domain~SshSession#toJsonEncoding} does.\n     * \n     * @param {string|Object} json the JSON to parse, or a parsed JSON object\n     * @returns {module:domain~SshSession} the session instance \n     */\n    static fromJsonEncoding(json) {\n        const args = [];\n        if ( json ) {\n            const obj = (typeof json === 'string' ? JSON.parse(json) : json);\n            if ( obj.created ) {\n                args.push(new Date(obj.created));\n            } else {\n                args.push(new Date());\n            }\n            args.push(obj.sessionId || '');\n            args.push(obj.nodeId || null);\n            args.push(obj.host || '');\n            args.push(obj.port || null);\n            args.push(obj.reversePort || null);\n            args.push(obj.startInstructionId);\n            args.push(obj.stopInstructionId);\n        }\n        return new SshSession(...args);\n    }\n\n}\n\nexport default SshSession;\n","/** @module net */\n\nimport {\n    AuthorizationV2Builder,\n    Environment, \n    NodeInstructionUrlHelperMixin,\n    NodeMetadataUrlHelperMixin, \n    NodeUrlHelperMixin,\n    UrlHelper, \n    UserUrlHelperMixin } from 'solarnetwork-api-core';\n\n/** The SolarSsh default path. */\nexport const SolarSshDefaultPath = '';\n\n/** The {@link UrlHelper} parameters key for the SolarSsh path. */\nexport const SolarSshPathKey = 'solarSshPath';\n\n/** The SolarSsh REST API path. */\nexport const SolarSshApiPathV1 = '/api/v1';\n\n/** The SolarSsh WebSocket path for a terminal connection. */\nexport const SolarSshTerminalWebSocketPath = '/ssh';\n\n/** The sub-protocol to use for SolarSSH WebSocket connections. */\nexport const SolarSshTerminalWebSocketSubProtocol = 'solarssh';\n\n/** An {@link UrlHelper} parameter key for a {@link SshSession} instance. */\nexport const SshSessionKey = 'sshSession';\n\n/** The node instruction for initiating a SolarSSH connection. */\nexport const StartRemoteSshInstructionName = 'StartRemoteSsh';\n\n/** The node instruction for closing a SolarSSH connection. */\nexport const StopRemoteSshInstructionName = 'StopRemoteSsh';\n\n/**\n * UrlHelper that supports instructions and node metadata.\n */\nclass InstructionUrlHelper extends NodeInstructionUrlHelperMixin(NodeMetadataUrlHelperMixin(\n    UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)))) {\n}\n\n/**\n * Create a SshUrlHelperMixin class.\n *\n * @exports net\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~SshUrlHelperMixin} the mixin class\n */\nconst SshUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarSsh specific support to {@link UrlHelper}.\n * \n * @mixin\n * @alias module:net~SshUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Constructor.\n     * \n     * @param {*} args any number of arguments, but the first argument is assumed to be either an {@link Environment}\n     *                 instance or a simple object that serves as the SolarSSH environment \n     */\n    constructor(...args) {\n        const env = (args && args[0] ? (args[0] instanceof Environment ? args[0] : new Environment(args[0])) : new Environment({\n\t\t\ttls: true,\n            host: 'ssh.solarnetwork.net',\n            port: 8443,\n\t\t\tsolarSshPath: '',\n        }));\n        if ( !args ) {\n            args = [];\n        }\n        args[0] = env;\n        super(...args);\n        this._instructionUrlHelper = new InstructionUrlHelper();\n        this._instructionAuthBuilder = new AuthorizationV2Builder(null, this._instructionUrlHelper);\n    }\n\n    /**\n     * A SSH session object.\n     * \n     * @type {SshSession}\n     */\n    get sshSession() {\n        return this.parameter(SshSessionKey);\n    }\n\n    set sshSession(sshSession) {\n        this.parameter(SshSessionKey, sshSession);\n    }\n\n    /**\n     * Set the node ID.\n     * @override\n     * @inheritdoc\n     */\n    set nodeId(nodeId) {\n        super.nodeId = nodeId;\n        this._instructionUrlHelper.nodeId = nodeId;\n    }\n\n    /**\n     * Get the node ID.\n     * @override\n     * @inheritdoc\n     */\n    get nodeId() {\n        return super.nodeId;\n    }\n\n    /**\n     * Get the environment used for instruction URL pre-authorization values.\n     * \n     * @type {Environment}\n     */\n    get nodeUrlHelperEnvironment() {\n        return this._instructionUrlHelper.environment;\n    }\n\n    set nodeUrlHelperEnvironment(environment) {\n        this._instructionUrlHelper.environment = environment;\n        this._instructionAuthBuilder.environment = environment;\n    }\n\n    /**\n     * Get the auth builder used for instruction URL pre-authorization values.\n     * \n     * @type {AuthorizationV2Builder}\n     */\n    get nodeInstructionAuthBuilder() {\n        return this._instructionAuthBuilder;\n    }\n\n    /**\n     * Shortcut for getting the SSH session ID from the {@link module:domain~SshSession#session} property.\n     * \n     * @alias SshSession#sessionId\n     * @readonly\n     * @type {string}\n     */\n    get sshSessionId() {\n        const session = this.sshSession;\n        return (session ? session.sessionId : undefined);\n    }\n\n    /**\n\t * Get the base URL to the SolarSSH v1 REST API.\n\t * \n\t * The returned URL uses the configured environment to resolve\n\t * the <code>hostUrl</code>, the <code>solarSshPath</code> context path.\n\t * \n\t * @returns {string} the base URL to SolarSSH\n\t */\n\tbaseUrl() {\n\t\tconst path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n\t\treturn this.hostUrl() + path + SolarSshApiPathV1;\n    }\n\n    /**\n     * Get the URL to the SolarSSH WebSocket termainl connection to the configured SolarNode.\n     * \n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the WebSocket terminal URL\n     */\n    terminalWebSocketUrl(sessionId) {\n\t\tconst path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n        const sessId = (sessionId || this.sshSessionId);\n        return this.hostWebSocketUrl() + path + SolarSshTerminalWebSocketPath\n            +'?sessionId=' +encodeURIComponent(sessId);\n    }\n    \n    /**\n     * Get the URL to the SolarSSH HTTP proxy to the configured SolarNode.\n     * \n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the HTTP proxy URL\n     */\n    httpProxyUrl(sessionId) {\n\t\tconst path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n        const sessId = (sessionId || this.sshSessionId);\n        return this.hostUrl() + path + '/nodeproxy/' +encodeURIComponent(sessId) + '/';\n\t}\n\n    /**\n     * Generate a URL for creating a new SolarSSH session.\n     * \n     * @param {number} [nodeId] the node ID to connect to; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {string} the URL\n     */\n    createSshSessionUrl(nodeId) {\n        const node = (nodeId || this.nodeId);\n        return this.baseUrl() + '/ssh/session/new?nodeId=' + node;\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     * \n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     * \n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    createSshSessionAuthBuilder(nodeId) {\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .method('GET')\n            .url(this._instructionUrlHelper.viewPendingInstructionsUrl(nodeId));\n    }\n\n    /**\n     * Generate a URL for starting a SolarSSH session.\n     * \n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    startSshSessionUrl(sessionId) {\n        const sessId = (sessionId || this.sshSessionId);\n        return this.baseUrl() + '/ssh/session/' +encodeURIComponent(sessId) +'/start';\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the start session request.\n     * \n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL  with the <code>StartRemoteSsh</code> instruction.\n     * \n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    startSshSessionAuthBuilder(sshSession, nodeId) {\n        const session = sshSession || this.sshSession || {};\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .method('POST')\n            .contentType('application/x-www-form-urlencoded')\n\t\t\t.url(this._instructionUrlHelper.queueInstructionUrl(StartRemoteSshInstructionName, [\n\t\t\t\t{name: 'host', value: session.sshHost},\n\t\t\t\t{name: 'user', value: session.sessionId},\n\t\t\t\t{name: 'port', value: session.sshPort},\n\t\t\t\t{name: 'rport', value: session.reverseSshPort }\n\t\t\t], nodeId));\n    }\n\n    /**\n     * Generate a URL for stopping a SolarSSH session.\n     * \n     * @param {string} [sessionId] the {@link module:domain/sshSession~SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    stopSshSessionUrl(sessionId) {\n        const sessId = (sessionId || this.sshSessionId);\n        return this.baseUrl() + '/ssh/session/' +encodeURIComponent(sessId) +'/stop';\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the stop session request.\n     * \n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL with the <code>StopRemoteSsh</code> instruction.\n     * \n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    stopSshSessionAuthBuilder(sshSession, nodeId) {\n        const session = sshSession || this.sshSession || {};\n        const node = nodeId || this.nodeId;\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .method('POST')\n            .contentType('application/x-www-form-urlencoded')\n\t\t\t.url(this._instructionUrlHelper.queueInstructionUrl(StopRemoteSshInstructionName, [\n\t\t\t\t{name: 'host', value: session.sshHost},\n\t\t\t\t{name: 'user', value: session.sessionId},\n\t\t\t\t{name: 'port', value: session.sshPort},\n\t\t\t\t{name: 'rport', value: session.reverseSshPort }\n\t\t\t], node));\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StartRemoteSsh</code> instruction.\n     * \n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStartRemoteSshInstructionUrl(instructionId) {\n        const session = this.sshSession || {};\n        const instrId = instructionId || session.startInstructionId;\n        return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StartRemoteSsh</code> instruction.\n     * \n     * <p>The returned builder will be configured with the same URL returned from \n     * {@link module:net~SshUrlHelperMixin#viewStartRemoteSshInstructionUrl}.\n     * \n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n   viewStartRemoteSshInstructionAuthBuilder(instructionId) {\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .url(this.viewStartRemoteSshInstructionUrl(instructionId));\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StopRemoteSsh</code> instruction.\n     * \n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStopRemoteSshInstructionUrl(instructionId) {\n        const session = this.sshSession || {};\n        const instrId = instructionId || session.stopInstructionId;\n        return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StopRemoteSsh</code> instruction.\n     * \n     * <p>The returned builder will be configured with the same URL returned from \n     * {@link module:net~SshUrlHelperMixin#viewStopRemoteSshInstructionUrl}.\n     * \n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>stopInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n   viewStopRemoteSshInstructionAuthBuilder(instructionId) {\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .url(this.viewStopRemoteSshInstructionUrl(instructionId));\n    }\n    \n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     * \n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     * \n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    connectTerminalWebSocketAuthBuilder(nodeId) {\n        const node = nodeId || this.nodeId;\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .method('GET')\n            .url(this._instructionUrlHelper.viewNodeMetadataUrl(node));\n    }\n\n};\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~SshUrlHelperMixin} and\n * {@link NodeUrlHelperMixin} mixins.\n * \n * @mixes SshUrlHelperMixin\n * @mixes NodeUrlHelperMixin\n * @extends UrlHelper\n */\nclass SshUrlHelper extends SshUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)) {\n}\n\nexport default SshUrlHelperMixin;\nexport { SshUrlHelper };\n"]}