{"version":3,"file":"solarnetwork-api-ssh.js","sources":["../src/domain/sshCommand.js","../src/domain/sshTerminalSettings.js","../src/domain/attachSshCommand.js","../src/domain/sshCloseCode.js","../src/domain/sshSession.js","../src/net/sshUrlHelperMixin.js"],"sourcesContent":["/**\n * A command with data.\n */\nclass SshCommand {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} command the command\n     * @param {*} [data] optional data to associate with the command\n     */\n    constructor(command, data) {\n        this.command = command;\n        this.data = data;\n        if ( this.constructor === SshCommand ) {\n            Object.freeze(this);\n        }\n    }\n    \n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * If <code>data</code> has a <code>toJsonEncoding()</code> function, that will be invoked\n     * and used in the result. Otherwise the <code>data</code> object will be serialized to\n     * JSON via <code>JSON.stringify()</code>.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n        const result = {};\n        if ( this.command ) {\n            result['cmd'] = this.command;\n        }\n        const data = this.data;\n        if ( data && data.toJsonEncoding ) {\n            const dataJson = data.toJsonEncoding();\n            result['data'] = JSON.parse(dataJson);\n        } else if ( data ) {\n            result['data'] = data;\n        }\n\n\t\treturn JSON.stringify(result);\n    }\n\n    /**\n     * Parse a JSON string into a {@link module:domain~SshCommand} instance.\n     * \n     * The JSON must be encoded the same way {@link module:domain~SshCommand#toJsonEncoding} does.\n     * \n     * @param {string} json the JSON to parse\n     * @param {function} [dataParser] if provided, a function that accepts a string of JSON and returns\n     *                                an object representation of that data; if not provided then a \n     *                                simple object parsed via <code>JSON.parse()</code> will be used\n     * @returns {module:domain~SshCommand} the command instance \n     */\n    static fromJsonEncoding(json, dataParser) {\n        let command, data;\n        if ( json ) {\n            const obj = JSON.parse(json);\n            command = obj['cmd'];\n            data = obj['data'];\n            if ( data && dataParser ) {\n                data = dataParser(JSON.stringify(data));\n            }\n        }\n        return new SshCommand(command, data);\n    }\n}\n\nexport default SshCommand;\n","/** @module domain */\n\nimport { stringMapToObject, objectToStringMap } from 'solarnetwork-api-core';\n\n/**\n * Settings for a SSH terminal.\n */\nclass SshTerminalSettings {\n\n    /**\n     * Constructor.\n     * \n     * @param {number} [cols=80] the characters width\n     * @param {number} [lines=24] the number of lines\n     * @param {number} [width=640] the pixel width\n     * @param {number} [height=480] the pixel height\n     * @param {string} [type=xterm] the terminal type\n     * @param {Map<string, string>} [environment] environment properties to pass to the shell\n     */\n    constructor(cols, lines, width, height, type, environment) {\n        this.cols = cols || 80;\n        this.lines = lines || 24;\n        this.width = width || 640;\n        this.height = height || 480;\n        this.type = type || 'xterm';\n        this.environment = environment instanceof Map ? environment : objectToStringMap(environment);\n    }\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n        const result = {};\n        if ( this.type ) {\n            result['term'] = this.type;\n        }\n        if ( this.cols ) {\n            result['cols'] = this.cols;\n        }\n        if ( this.lines ) {\n            result['lines'] = this.lines;\n        }\n        if ( this.width ) {\n            result['width'] = this.width;\n        }\n        if ( this.height ) {\n            result['height'] = this.height;\n        }\n        if ( this.environment instanceof Map && this.environment.size > 0 ) {\n            result['environment'] = stringMapToObject(this.environment);\n        }\n\n\t\treturn JSON.stringify(result);\n    }\n\n    /**\n     * Parse a JSON string into a {@link module:domain~SshTerminalSettings} instance.\n     * \n     * The JSON must be encoded the same way {@link module:domain~SshTerminalSettings#toJsonEncoding} does.\n     * \n     * @param {string} json the JSON to parse\n     * @returns {module:domain~SshTerminalSettings} the session instance \n     */\n    static fromJsonEncoding(json) {\n        const result = new SshTerminalSettings();\n        if ( json ) {\n            const obj = JSON.parse(json);\n            if ( obj['term'] ) {\n                result.type = obj['term'];\n            }\n            if ( obj['cols'] ) {\n                result.cols = obj['cols'];\n            }\n            if ( obj['lines'] ) {\n                result.lines = obj['lines'];\n            }\n            if ( obj['width'] ) {\n                result.width = obj['width'];\n            }\n            if ( obj['height'] ) {\n                result.height = obj['height'];\n            }\n            if ( obj['environment'] ) {\n                result.environment = objectToStringMap(obj['environment']);\n            }\n        }\n        return result;\n    }\n\n}\n\nexport default SshTerminalSettings;\n","import SshCommand from './sshCommand';\nimport SshTerminalSettings from './sshTerminalSettings';\n\n/** The command for attaching to a SSH terminal shell. */\nexport const SolarSshCommandAttachSsh = 'attach-ssh';\n\n/**\n * SSH command for attaching to a SSH terminal shell.\n */\nclass AttachSshCommand extends SshCommand {\n    /**\n     * Constructor.\n     * \n     * @param {string} authorization a pre-computed SNWS2 authorization header, which must match\n     *        exactly a `GET` request to the `/solaruser/api/v1/sec/nodes/meta/:nodeId`\n     *        path using the provided authorization date and, node ID.\n     * @param {Date|number} authorizationDate the date used in the `authorization` value\n     * @param {string} username the SSH username to use\n     * @param {string} password the SSH password to use\n     * @param {SshTerminalSettings} [terminalSettings] optional terminal settings to use\n     */\n    constructor(authorization, authorizationDate, username, password, terminalSettings) {\n        const data = {};\n        data['authorization'] = authorization;\n        data['authorization-date'] = (authorizationDate instanceof Date ? authorizationDate.getTime() : authorizationDate);\n        data['username'] = username;\n        data['password'] = password;\n        if ( terminalSettings instanceof SshTerminalSettings ) {\n            const termOpts = JSON.parse(terminalSettings.toJsonEncoding());\n            for ( const prop of Object.keys(termOpts) ) {\n                if ( data[prop] === undefined ) {\n                    data[prop] = termOpts[prop];\n                }\n            }\n        }\n        super(SolarSshCommandAttachSsh, data);\n    }\n}\n\nexport default AttachSshCommand;\n","/** @module domain */\n\nimport { ComparableEnum } from 'solarnetwork-api-core';\n\n/**\n * A named socket close code.\n */\nclass SshCloseCode extends ComparableEnum {\n\n    /**\n     * Constructor.\n     * \n     * @param {string} name the name\n     * @param {value} value the value\n     */\n    constructor(name, value) {\n        super(name, value);\n        if ( this.constructor === SshCloseCode ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n\t * Get the {@link SshCloseCodes} values.\n\t * \n\t * @inheritdoc\n\t */\n\tstatic enumValues() {\n\t\treturn SshCloseCodeValues;\n\t}\n\n}\n\nconst SshCloseCodeValues = Object.freeze([\n\tnew SshCloseCode('AUTHENTICATION_FAILURE', 4000),\n]);\n\n/**\n * The enumeration of supported SshCloseCode values.\n * \n * @readonly\n * @enum {SshCloseCode}\n * @property {SshCloseCode} AUTHENTICATION_FAILURE an authentication failure\n */\nconst SshCloseCodes = SshCloseCode.enumsValue(SshCloseCodeValues);\n\nexport default SshCloseCodes;\nexport { SshCloseCode };","/** @module domain */\n\n/**\n * A SolarSSH session object.\n */\nclass SshSession {\n    \n    /**\n     * Constructor.\n     * \n     * @param {Date} created the creation date\n     * @param {string} sessionId the unique session ID\n     * @param {number} nodeId the node ID\n     * @param {string} sshHost the SSH host name\n     * @param {number} sshPort the SSH port\n     * @param {number} reverseSshPort the reverse SSH port\n     * @param {number} [startInstructionId] the <code>StartRemoteSsh</code> instruction ID\n     * @param {number} [stopInstructionId] the <code>StopRemoteSsh</code> instruction ID\n     */\n    constructor(created, sessionId, nodeId, sshHost, sshPort, reverseSshPort,\n            startInstructionId, stopInstructionId) {\n        this.created = created;\n        this.sessionId = sessionId;\n        this.nodeId = nodeId;\n        this.sshHost = sshHost;\n        this.sshPort = sshPort;\n        this.reverseSshPort = reverseSshPort;\n        this.startInstructionId = startInstructionId;\n        this.stopInstructionId = stopInstructionId;\n        if ( this.constructor === SshSession ) {\n            Object.freeze(this);\n        }\n    }\n\n    /**\n     * Get this object as a standard JSON encoded string value.\n     * \n     * @return {string} the JSON encoded string\n     */\n    toJsonEncoding() {\n        const result = {};\n        if ( this.sessionId ) {\n            result['sessionId'] = this.sessionId;\n        }\n        if ( this.created ) {\n            result['created'] = this.created.getTime();\n        }\n        if ( this.nodeId ) {\n            result['nodeId'] = this.nodeId;\n        }\n        if ( this.sshHost ) {\n            result['host'] = this.sshHost;\n        }\n        if ( this.sshPort ) {\n            result['port'] = this.sshPort;\n        }\n        if ( this.reverseSshPort ) {\n            result['reversePort'] = this.reverseSshPort;\n        }\n        if ( this.startInstructionId ) {\n            result['startInstructionId'] = this.startInstructionId;\n        }\n        if ( this.stopInstructionId ) {\n            result['stopInstructionId'] = this.stopInstructionId;\n        }\n\n\t\treturn JSON.stringify(result);\n    }\n\n    /**\n     * Parse a JSON string into a {@link module:domain~SshSession} instance.\n     * \n     * The JSON must be encoded the same way {@link module:domain~SshSession#toJsonEncoding} does.\n     * \n     * @param {string|Object} json the JSON to parse, or a parsed JSON object\n     * @returns {module:domain~SshSession} the session instance \n     */\n    static fromJsonEncoding(json) {\n        const args = [];\n        if ( json ) {\n            const obj = (typeof json === 'string' ? JSON.parse(json) : json);\n            if ( obj.created ) {\n                args.push(new Date(obj.created));\n            } else {\n                args.push(new Date());\n            }\n            args.push(obj.sessionId || '');\n            args.push(obj.nodeId || null);\n            args.push(obj.host || '');\n            args.push(obj.port || null);\n            args.push(obj.reversePort || null);\n            args.push(obj.startInstructionId);\n            args.push(obj.stopInstructionId);\n        }\n        return new SshSession(...args);\n    }\n\n}\n\nexport default SshSession;\n","/** @module net */\n\nimport {\n    AuthorizationV2Builder,\n    Environment, \n    NodeInstructionUrlHelperMixin,\n    NodeMetadataUrlHelperMixin, \n    NodeUrlHelperMixin,\n    UrlHelper, \n    UserUrlHelperMixin } from 'solarnetwork-api-core';\n\n/** The SolarSsh default path. */\nexport const SolarSshDefaultPath = '';\n\n/** The {@link UrlHelper} parameters key for the SolarSsh path. */\nexport const SolarSshPathKey = 'solarSshPath';\n\n/** The SolarSsh REST API path. */\nexport const SolarSshApiPathV1 = '/api/v1';\n\n/** The SolarSsh WebSocket path for a terminal connection. */\nexport const SolarSshTerminalWebSocketPath = '/ssh';\n\n/** The sub-protocol to use for SolarSSH WebSocket connections. */\nexport const SolarSshTerminalWebSocketSubProtocol = 'solarssh';\n\n/** An {@link UrlHelper} parameter key for a {@link SshSession} instance. */\nexport const SshSessionKey = 'sshSession';\n\n/** The node instruction for initiating a SolarSSH connection. */\nexport const StartRemoteSshInstructionName = 'StartRemoteSsh';\n\n/** The node instruction for closing a SolarSSH connection. */\nexport const StopRemoteSshInstructionName = 'StopRemoteSsh';\n\n/**\n * UrlHelper that supports instructions and node metadata.\n */\nclass InstructionUrlHelper extends NodeInstructionUrlHelperMixin(NodeMetadataUrlHelperMixin(\n    UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)))) {\n}\n\n/**\n * Create a SshUrlHelperMixin class.\n *\n * @exports net\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~SshUrlHelperMixin} the mixin class\n */\nconst SshUrlHelperMixin = (superclass) => \n\n/**\n * A mixin class that adds SolarSsh specific support to {@link UrlHelper}.\n * \n * @mixin\n * @alias module:net~SshUrlHelperMixin\n */\nclass extends superclass {\n\n    /**\n     * Constructor.\n     * \n     * @param {*} args any number of arguments, but the first argument is assumed to be either an {@link Environment}\n     *                 instance or a simple object that serves as the SolarSSH environment \n     */\n    constructor(...args) {\n        const env = (args && args[0] ? (args[0] instanceof Environment ? args[0] : new Environment(args[0])) : new Environment({\n\t\t\ttls: true,\n            host: 'ssh.solarnetwork.net',\n            port: 8443,\n\t\t\tsolarSshPath: '',\n        }));\n        if ( !args ) {\n            args = [];\n        }\n        args[0] = env;\n        super(...args);\n        this._instructionUrlHelper = new InstructionUrlHelper();\n        this._instructionAuthBuilder = new AuthorizationV2Builder(null, this._instructionUrlHelper);\n    }\n\n    /**\n     * A SSH session object.\n     * \n     * @type {SshSession}\n     */\n    get sshSession() {\n        return this.parameter(SshSessionKey);\n    }\n\n    set sshSession(sshSession) {\n        this.parameter(SshSessionKey, sshSession);\n    }\n\n    /**\n     * Set the node ID.\n     * @override\n     * @inheritdoc\n     */\n    set nodeId(nodeId) {\n        super.nodeId = nodeId;\n        this._instructionUrlHelper.nodeId = nodeId;\n    }\n\n    /**\n     * Get the node ID.\n     * @override\n     * @inheritdoc\n     */\n    get nodeId() {\n        return super.nodeId;\n    }\n\n    /**\n     * Get the environment used for instruction URL pre-authorization values.\n     * \n     * @type {Environment}\n     */\n    get nodeUrlHelperEnvironment() {\n        return this._instructionUrlHelper.environment;\n    }\n\n    set nodeUrlHelperEnvironment(environment) {\n        this._instructionUrlHelper.environment = environment;\n        this._instructionAuthBuilder.environment = environment;\n    }\n\n    /**\n     * Get the auth builder used for instruction URL pre-authorization values.\n     * \n     * @type {AuthorizationV2Builder}\n     */\n    get nodeInstructionAuthBuilder() {\n        return this._instructionAuthBuilder;\n    }\n\n    /**\n     * Shortcut for getting the SSH session ID from the {@link module:domain~SshSession#session} property.\n     * \n     * @alias SshSession#sessionId\n     * @readonly\n     * @type {string}\n     */\n    get sshSessionId() {\n        const session = this.sshSession;\n        return (session ? session.sessionId : undefined);\n    }\n\n    /**\n\t * Get the base URL to the SolarSSH v1 REST API.\n\t * \n\t * The returned URL uses the configured environment to resolve\n\t * the <code>hostUrl</code>, the <code>solarSshPath</code> context path.\n\t * \n\t * @returns {string} the base URL to SolarSSH\n\t */\n\tbaseUrl() {\n\t\tconst path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n\t\treturn this.hostUrl() + path + SolarSshApiPathV1;\n    }\n\n    /**\n     * Get the URL to the SolarSSH WebSocket termainl connection to the configured SolarNode.\n     * \n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the WebSocket terminal URL\n     */\n    terminalWebSocketUrl(sessionId) {\n\t\tconst path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n        const sessId = (sessionId || this.sshSessionId);\n        return this.hostWebSocketUrl() + path + SolarSshTerminalWebSocketPath\n            +'?sessionId=' +encodeURIComponent(sessId);\n    }\n    \n    /**\n     * Get the URL to the SolarSSH HTTP proxy to the configured SolarNode.\n     * \n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the HTTP proxy URL\n     */\n    httpProxyUrl(sessionId) {\n\t\tconst path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n        const sessId = (sessionId || this.sshSessionId);\n        return this.hostUrl() + path + '/nodeproxy/' +encodeURIComponent(sessId) + '/';\n\t}\n\n    /**\n     * Generate a URL for creating a new SolarSSH session.\n     * \n     * @param {number} [nodeId] the node ID to connect to; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {string} the URL\n     */\n    createSshSessionUrl(nodeId) {\n        const node = (nodeId || this.nodeId);\n        return this.baseUrl() + '/ssh/session/new?nodeId=' + node;\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     * \n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     * \n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    createSshSessionAuthBuilder(nodeId) {\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .method('GET')\n            .url(this._instructionUrlHelper.viewPendingInstructionsUrl(nodeId));\n    }\n\n    /**\n     * Generate a URL for starting a SolarSSH session.\n     * \n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    startSshSessionUrl(sessionId) {\n        const sessId = (sessionId || this.sshSessionId);\n        return this.baseUrl() + '/ssh/session/' +encodeURIComponent(sessId) +'/start';\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the start session request.\n     * \n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL  with the <code>StartRemoteSsh</code> instruction.\n     * \n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    startSshSessionAuthBuilder(sshSession, nodeId) {\n        const session = sshSession || this.sshSession || {};\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .method('POST')\n            .contentType('application/x-www-form-urlencoded')\n\t\t\t.url(this._instructionUrlHelper.queueInstructionUrl(StartRemoteSshInstructionName, [\n\t\t\t\t{name: 'host', value: session.sshHost},\n\t\t\t\t{name: 'user', value: session.sessionId},\n\t\t\t\t{name: 'port', value: session.sshPort},\n\t\t\t\t{name: 'rport', value: session.reverseSshPort }\n\t\t\t], nodeId));\n    }\n\n    /**\n     * Generate a URL for stopping a SolarSSH session.\n     * \n     * @param {string} [sessionId] the {@link module:domain/sshSession~SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    stopSshSessionUrl(sessionId) {\n        const sessId = (sessionId || this.sshSessionId);\n        return this.baseUrl() + '/ssh/session/' +encodeURIComponent(sessId) +'/stop';\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the stop session request.\n     * \n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL with the <code>StopRemoteSsh</code> instruction.\n     * \n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    stopSshSessionAuthBuilder(sshSession, nodeId) {\n        const session = sshSession || this.sshSession || {};\n        const node = nodeId || this.nodeId;\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .method('POST')\n            .contentType('application/x-www-form-urlencoded')\n\t\t\t.url(this._instructionUrlHelper.queueInstructionUrl(StopRemoteSshInstructionName, [\n\t\t\t\t{name: 'host', value: session.sshHost},\n\t\t\t\t{name: 'user', value: session.sessionId},\n\t\t\t\t{name: 'port', value: session.sshPort},\n\t\t\t\t{name: 'rport', value: session.reverseSshPort }\n\t\t\t], node));\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StartRemoteSsh</code> instruction.\n     * \n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStartRemoteSshInstructionUrl(instructionId) {\n        const session = this.sshSession || {};\n        const instrId = instructionId || session.startInstructionId;\n        return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StartRemoteSsh</code> instruction.\n     * \n     * <p>The returned builder will be configured with the same URL returned from \n     * {@link module:net~SshUrlHelperMixin#viewStartRemoteSshInstructionUrl}.\n     * \n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n   viewStartRemoteSshInstructionAuthBuilder(instructionId) {\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .url(this.viewStartRemoteSshInstructionUrl(instructionId));\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StopRemoteSsh</code> instruction.\n     * \n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStopRemoteSshInstructionUrl(instructionId) {\n        const session = this.sshSession || {};\n        const instrId = instructionId || session.stopInstructionId;\n        return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StopRemoteSsh</code> instruction.\n     * \n     * <p>The returned builder will be configured with the same URL returned from \n     * {@link module:net~SshUrlHelperMixin#viewStopRemoteSshInstructionUrl}.\n     * \n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>stopInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n   viewStopRemoteSshInstructionAuthBuilder(instructionId) {\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .url(this.viewStopRemoteSshInstructionUrl(instructionId));\n    }\n    \n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     * \n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     * \n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    connectTerminalWebSocketAuthBuilder(nodeId) {\n        const node = nodeId || this.nodeId;\n        return this._instructionAuthBuilder.reset()\n            .snDate(true)\n            .method('GET')\n            .url(this._instructionUrlHelper.viewNodeMetadataUrl(node));\n    }\n\n};\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~SshUrlHelperMixin} and\n * {@link NodeUrlHelperMixin} mixins.\n * \n * @mixes SshUrlHelperMixin\n * @mixes NodeUrlHelperMixin\n * @extends UrlHelper\n */\nclass SshUrlHelper extends SshUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)) {\n}\n\nexport default SshUrlHelperMixin;\nexport { SshUrlHelper };\n"],"names":["SshCommand","command","data","constructor","freeze","result","toJsonEncoding","dataJson","JSON","parse","stringify","json","dataParser","obj","SshTerminalSettings","cols","lines","width","height","type","environment","Map","objectToStringMap","size","stringMapToObject","SolarSshCommandAttachSsh","AttachSshCommand","authorization","authorizationDate","username","password","terminalSettings","Date","getTime","termOpts","Object","keys","prop","undefined","SshCloseCode","name","value","SshCloseCodeValues","ComparableEnum","SshCloseCodes","enumsValue","SshSession","created","sessionId","nodeId","sshHost","sshPort","reverseSshPort","startInstructionId","stopInstructionId","args","push","host","port","reversePort","SolarSshDefaultPath","SolarSshPathKey","SolarSshApiPathV1","SolarSshTerminalWebSocketPath","SolarSshTerminalWebSocketSubProtocol","SshSessionKey","StartRemoteSshInstructionName","StopRemoteSshInstructionName","InstructionUrlHelper","NodeInstructionUrlHelperMixin","NodeMetadataUrlHelperMixin","UserUrlHelperMixin","NodeUrlHelperMixin","UrlHelper","SshUrlHelperMixin","superclass","env","Environment","_instructionUrlHelper","_instructionAuthBuilder","AuthorizationV2Builder","path","hostUrl","sessId","sshSessionId","hostWebSocketUrl","encodeURIComponent","node","baseUrl","reset","snDate","method","url","viewPendingInstructionsUrl","sshSession","session","contentType","queueInstructionUrl","instructionId","instrId","viewInstructionUrl","viewStartRemoteSshInstructionUrl","viewStopRemoteSshInstructionUrl","viewNodeMetadataUrl","parameter","SshUrlHelper"],"mappings":"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"}