{"version":3,"file":"solarnetwork-api-ssh.js","sources":["../src/domain/sshCommand.js","../src/domain/sshTerminalSettings.js","../src/domain/attachSshCommand.js","../src/domain/sshCloseCode.js","../src/domain/sshSession.js","../src/net/sshUrlHelperMixin.js"],"sourcesContent":["/**\n * A command with data.\n */\nclass SshCommand {\n  /**\n   * Constructor.\n   *\n   * @param {string} command the command\n   * @param {*} [data] optional data to associate with the command\n   */\n  constructor(command, data) {\n    this.command = command;\n    this.data = data;\n    if (this.constructor === SshCommand) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * If <code>data</code> has a <code>toJsonEncoding()</code> function, that will be invoked\n   * and used in the result. Otherwise the <code>data</code> object will be serialized to\n   * JSON via <code>JSON.stringify()</code>.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.command) {\n      result[\"cmd\"] = this.command;\n    }\n    const data = this.data;\n    if (data && data.toJsonEncoding) {\n      const dataJson = data.toJsonEncoding();\n      result[\"data\"] = JSON.parse(dataJson);\n    } else if (data) {\n      result[\"data\"] = data;\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshCommand} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshCommand#toJsonEncoding} does.\n   *\n   * @param {string} json the JSON to parse\n   * @param {function} [dataParser] if provided, a function that accepts a string of JSON and returns\n   *                                an object representation of that data; if not provided then a\n   *                                simple object parsed via <code>JSON.parse()</code> will be used\n   * @returns {module:domain~SshCommand} the command instance\n   */\n  static fromJsonEncoding(json, dataParser) {\n    let command, data;\n    if (json) {\n      const obj = JSON.parse(json);\n      command = obj[\"cmd\"];\n      data = obj[\"data\"];\n      if (data && dataParser) {\n        data = dataParser(JSON.stringify(data));\n      }\n    }\n    return new SshCommand(command, data);\n  }\n}\n\nexport default SshCommand;\n","/** @module domain */\n\nimport { stringMapToObject, objectToStringMap } from \"solarnetwork-api-core\";\n\n/**\n * Settings for a SSH terminal.\n */\nclass SshTerminalSettings {\n  /**\n   * Constructor.\n   *\n   * @param {number} [cols=80] the characters width\n   * @param {number} [lines=24] the number of lines\n   * @param {number} [width=640] the pixel width\n   * @param {number} [height=480] the pixel height\n   * @param {string} [type=xterm] the terminal type\n   * @param {Map<string, string>} [environment] environment properties to pass to the shell\n   */\n  constructor(cols, lines, width, height, type, environment) {\n    this.cols = cols || 80;\n    this.lines = lines || 24;\n    this.width = width || 640;\n    this.height = height || 480;\n    this.type = type || \"xterm\";\n    this.environment =\n      environment instanceof Map ? environment : objectToStringMap(environment);\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.type) {\n      result[\"term\"] = this.type;\n    }\n    if (this.cols) {\n      result[\"cols\"] = this.cols;\n    }\n    if (this.lines) {\n      result[\"lines\"] = this.lines;\n    }\n    if (this.width) {\n      result[\"width\"] = this.width;\n    }\n    if (this.height) {\n      result[\"height\"] = this.height;\n    }\n    if (this.environment instanceof Map && this.environment.size > 0) {\n      result[\"environment\"] = stringMapToObject(this.environment);\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshTerminalSettings} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshTerminalSettings#toJsonEncoding} does.\n   *\n   * @param {string} json the JSON to parse\n   * @returns {module:domain~SshTerminalSettings} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const result = new SshTerminalSettings();\n    if (json) {\n      const obj = JSON.parse(json);\n      if (obj[\"term\"]) {\n        result.type = obj[\"term\"];\n      }\n      if (obj[\"cols\"]) {\n        result.cols = obj[\"cols\"];\n      }\n      if (obj[\"lines\"]) {\n        result.lines = obj[\"lines\"];\n      }\n      if (obj[\"width\"]) {\n        result.width = obj[\"width\"];\n      }\n      if (obj[\"height\"]) {\n        result.height = obj[\"height\"];\n      }\n      if (obj[\"environment\"]) {\n        result.environment = objectToStringMap(obj[\"environment\"]);\n      }\n    }\n    return result;\n  }\n}\n\nexport default SshTerminalSettings;\n","import SshCommand from \"./sshCommand\";\nimport SshTerminalSettings from \"./sshTerminalSettings\";\n\n/** The command for attaching to a SSH terminal shell. */\nexport const SolarSshCommandAttachSsh = \"attach-ssh\";\n\n/**\n * SSH command for attaching to a SSH terminal shell.\n */\nclass AttachSshCommand extends SshCommand {\n  /**\n   * Constructor.\n   *\n   * @param {string} authorization a pre-computed SNWS2 authorization header, which must match\n   *        exactly a `GET` request to the `/solaruser/api/v1/sec/nodes/meta/:nodeId`\n   *        path using the provided authorization date and, node ID.\n   * @param {Date|number} authorizationDate the date used in the `authorization` value\n   * @param {string} username the SSH username to use\n   * @param {string} password the SSH password to use\n   * @param {SshTerminalSettings} [terminalSettings] optional terminal settings to use\n   */\n  constructor(\n    authorization,\n    authorizationDate,\n    username,\n    password,\n    terminalSettings\n  ) {\n    const data = {};\n    data[\"authorization\"] = authorization;\n    data[\"authorization-date\"] =\n      authorizationDate instanceof Date\n        ? authorizationDate.getTime()\n        : authorizationDate;\n    data[\"username\"] = username;\n    data[\"password\"] = password;\n    if (terminalSettings instanceof SshTerminalSettings) {\n      const termOpts = JSON.parse(terminalSettings.toJsonEncoding());\n      for (const prop of Object.keys(termOpts)) {\n        if (data[prop] === undefined) {\n          data[prop] = termOpts[prop];\n        }\n      }\n    }\n    super(SolarSshCommandAttachSsh, data);\n  }\n}\n\nexport default AttachSshCommand;\n","/** @module domain */\n\nimport { ComparableEnum } from \"solarnetwork-api-core\";\n\n/**\n * A named socket close code.\n */\nclass SshCloseCode extends ComparableEnum {\n  /**\n   * Constructor.\n   *\n   * @param {string} name the name\n   * @param {value} value the value\n   */\n  constructor(name, value) {\n    super(name, value);\n    if (this.constructor === SshCloseCode) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get the {@link SshCloseCodes} values.\n   *\n   * @inheritdoc\n   */\n  static enumValues() {\n    return SshCloseCodeValues;\n  }\n}\n\nconst SshCloseCodeValues = Object.freeze([\n  new SshCloseCode(\"AUTHENTICATION_FAILURE\", 4000)\n]);\n\n/**\n * The enumeration of supported SshCloseCode values.\n *\n * @readonly\n * @enum {SshCloseCode}\n * @property {SshCloseCode} AUTHENTICATION_FAILURE an authentication failure\n */\nconst SshCloseCodes = SshCloseCode.enumsValue(SshCloseCodeValues);\n\nexport default SshCloseCodes;\nexport { SshCloseCode };\n","/** @module domain */\n\n/**\n * A SolarSSH session object.\n */\nclass SshSession {\n  /**\n   * Constructor.\n   *\n   * @param {Date} created the creation date\n   * @param {string} sessionId the unique session ID\n   * @param {number} nodeId the node ID\n   * @param {string} sshHost the SSH host name\n   * @param {number} sshPort the SSH port\n   * @param {number} reverseSshPort the reverse SSH port\n   * @param {number} [startInstructionId] the <code>StartRemoteSsh</code> instruction ID\n   * @param {number} [stopInstructionId] the <code>StopRemoteSsh</code> instruction ID\n   */\n  constructor(\n    created,\n    sessionId,\n    nodeId,\n    sshHost,\n    sshPort,\n    reverseSshPort,\n    startInstructionId,\n    stopInstructionId\n  ) {\n    this.created = created;\n    this.sessionId = sessionId;\n    this.nodeId = nodeId;\n    this.sshHost = sshHost;\n    this.sshPort = sshPort;\n    this.reverseSshPort = reverseSshPort;\n    this.startInstructionId = startInstructionId;\n    this.stopInstructionId = stopInstructionId;\n    if (this.constructor === SshSession) {\n      Object.freeze(this);\n    }\n  }\n\n  /**\n   * Get this object as a standard JSON encoded string value.\n   *\n   * @return {string} the JSON encoded string\n   */\n  toJsonEncoding() {\n    const result = {};\n    if (this.sessionId) {\n      result[\"sessionId\"] = this.sessionId;\n    }\n    if (this.created) {\n      result[\"created\"] = this.created.getTime();\n    }\n    if (this.nodeId) {\n      result[\"nodeId\"] = this.nodeId;\n    }\n    if (this.sshHost) {\n      result[\"host\"] = this.sshHost;\n    }\n    if (this.sshPort) {\n      result[\"port\"] = this.sshPort;\n    }\n    if (this.reverseSshPort) {\n      result[\"reversePort\"] = this.reverseSshPort;\n    }\n    if (this.startInstructionId) {\n      result[\"startInstructionId\"] = this.startInstructionId;\n    }\n    if (this.stopInstructionId) {\n      result[\"stopInstructionId\"] = this.stopInstructionId;\n    }\n\n    return JSON.stringify(result);\n  }\n\n  /**\n   * Parse a JSON string into a {@link module:domain~SshSession} instance.\n   *\n   * The JSON must be encoded the same way {@link module:domain~SshSession#toJsonEncoding} does.\n   *\n   * @param {string|Object} json the JSON to parse, or a parsed JSON object\n   * @returns {module:domain~SshSession} the session instance\n   */\n  static fromJsonEncoding(json) {\n    const args = [];\n    if (json) {\n      const obj = typeof json === \"string\" ? JSON.parse(json) : json;\n      if (obj.created) {\n        args.push(new Date(obj.created));\n      } else {\n        args.push(new Date());\n      }\n      args.push(obj.sessionId || \"\");\n      args.push(obj.nodeId || null);\n      args.push(obj.host || \"\");\n      args.push(obj.port || null);\n      args.push(obj.reversePort || null);\n      args.push(obj.startInstructionId);\n      args.push(obj.stopInstructionId);\n    }\n    return new SshSession(...args);\n  }\n}\n\nexport default SshSession;\n","/** @module net */\n\nimport {\n  AuthorizationV2Builder,\n  Environment,\n  NodeInstructionUrlHelperMixin,\n  NodeMetadataUrlHelperMixin,\n  NodeUrlHelperMixin,\n  UrlHelper,\n  UserUrlHelperMixin\n} from \"solarnetwork-api-core\";\n\n/** The SolarSsh default path. */\nexport const SolarSshDefaultPath = \"\";\n\n/** The {@link UrlHelper} parameters key for the SolarSsh path. */\nexport const SolarSshPathKey = \"solarSshPath\";\n\n/** The SolarSsh REST API path. */\nexport const SolarSshApiPathV1 = \"/api/v1\";\n\n/** The SolarSsh WebSocket path for a terminal connection. */\nexport const SolarSshTerminalWebSocketPath = \"/ssh\";\n\n/** The sub-protocol to use for SolarSSH WebSocket connections. */\nexport const SolarSshTerminalWebSocketSubProtocol = \"solarssh\";\n\n/** An {@link UrlHelper} parameter key for a {@link SshSession} instance. */\nexport const SshSessionKey = \"sshSession\";\n\n/** The node instruction for initiating a SolarSSH connection. */\nexport const StartRemoteSshInstructionName = \"StartRemoteSsh\";\n\n/** The node instruction for closing a SolarSSH connection. */\nexport const StopRemoteSshInstructionName = \"StopRemoteSsh\";\n\n/**\n * UrlHelper that supports instructions and node metadata.\n */\nclass InstructionUrlHelper extends NodeInstructionUrlHelperMixin(\n  NodeMetadataUrlHelperMixin(UserUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)))\n) {}\n\n/**\n * Create a SshUrlHelperMixin class.\n *\n * @exports net\n * @param {UrlHelper} superclass the UrlHelper class to mix onto\n * @return {module:net~SshUrlHelperMixin} the mixin class\n */\nconst SshUrlHelperMixin = superclass =>\n  /**\n   * A mixin class that adds SolarSsh specific support to {@link UrlHelper}.\n   *\n   * @mixin\n   * @alias module:net~SshUrlHelperMixin\n   */\n  class extends superclass {\n    /**\n     * Constructor.\n     *\n     * @param {*} args any number of arguments, but the first argument is assumed to be either an {@link Environment}\n     *                 instance or a simple object that serves as the SolarSSH environment\n     */\n    constructor(...args) {\n      const env =\n        args && args[0]\n          ? args[0] instanceof Environment\n            ? args[0]\n            : new Environment(args[0])\n          : new Environment({\n              tls: true,\n              host: \"ssh.solarnetwork.net\",\n              port: 8443,\n              solarSshPath: \"\"\n            });\n      if (!args) {\n        args = [];\n      }\n      args[0] = env;\n      super(...args);\n      this._instructionUrlHelper = new InstructionUrlHelper();\n      this._instructionAuthBuilder = new AuthorizationV2Builder(\n        null,\n        this._instructionUrlHelper\n      );\n    }\n\n    /**\n     * A SSH session object.\n     *\n     * @type {SshSession}\n     */\n    get sshSession() {\n      return this.parameter(SshSessionKey);\n    }\n\n    set sshSession(sshSession) {\n      this.parameter(SshSessionKey, sshSession);\n    }\n\n    /**\n     * Set the node ID.\n     * @override\n     * @inheritdoc\n     */\n    set nodeId(nodeId) {\n      super.nodeId = nodeId;\n      this._instructionUrlHelper.nodeId = nodeId;\n    }\n\n    /**\n     * Get the node ID.\n     * @override\n     * @inheritdoc\n     */\n    get nodeId() {\n      return super.nodeId;\n    }\n\n    /**\n     * Get the environment used for instruction URL pre-authorization values.\n     *\n     * @type {Environment}\n     */\n    get nodeUrlHelperEnvironment() {\n      return this._instructionUrlHelper.environment;\n    }\n\n    set nodeUrlHelperEnvironment(environment) {\n      this._instructionUrlHelper.environment = environment;\n      this._instructionAuthBuilder.environment = environment;\n    }\n\n    /**\n     * Get the auth builder used for instruction URL pre-authorization values.\n     *\n     * @type {AuthorizationV2Builder}\n     */\n    get nodeInstructionAuthBuilder() {\n      return this._instructionAuthBuilder;\n    }\n\n    /**\n     * Shortcut for getting the SSH session ID from the {@link module:domain~SshSession#session} property.\n     *\n     * @alias SshSession#sessionId\n     * @readonly\n     * @type {string}\n     */\n    get sshSessionId() {\n      const session = this.sshSession;\n      return session ? session.sessionId : undefined;\n    }\n\n    /**\n     * Get the base URL to the SolarSSH v1 REST API.\n     *\n     * The returned URL uses the configured environment to resolve\n     * the <code>hostUrl</code>, the <code>solarSshPath</code> context path.\n     *\n     * @returns {string} the base URL to SolarSSH\n     */\n    baseUrl() {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      return this.hostUrl() + path + SolarSshApiPathV1;\n    }\n\n    /**\n     * Get the URL to the SolarSSH WebSocket termainl connection to the configured SolarNode.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the WebSocket terminal URL\n     */\n    terminalWebSocketUrl(sessionId) {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.hostWebSocketUrl() +\n        path +\n        SolarSshTerminalWebSocketPath +\n        \"?sessionId=\" +\n        encodeURIComponent(sessId)\n      );\n    }\n\n    /**\n     * Get the URL to the SolarSSH HTTP proxy to the configured SolarNode.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the HTTP proxy URL\n     */\n    httpProxyUrl(sessionId) {\n      const path = this.env(SolarSshPathKey) || SolarSshDefaultPath;\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.hostUrl() + path + \"/nodeproxy/\" + encodeURIComponent(sessId) + \"/\"\n      );\n    }\n\n    /**\n     * Generate a URL for creating a new SolarSSH session.\n     *\n     * @param {number} [nodeId] the node ID to connect to; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {string} the URL\n     */\n    createSshSessionUrl(nodeId) {\n      const node = nodeId || this.nodeId;\n      return this.baseUrl() + \"/ssh/session/new?nodeId=\" + node;\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     *\n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     *\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    createSshSessionAuthBuilder(nodeId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"GET\")\n        .url(this._instructionUrlHelper.viewPendingInstructionsUrl(nodeId));\n    }\n\n    /**\n     * Generate a URL for starting a SolarSSH session.\n     *\n     * @param {string} [sessionId] the {@link SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    startSshSessionUrl(sessionId) {\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.baseUrl() + \"/ssh/session/\" + encodeURIComponent(sessId) + \"/start\"\n      );\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the start session request.\n     *\n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL  with the <code>StartRemoteSsh</code> instruction.\n     *\n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    startSshSessionAuthBuilder(sshSession, nodeId) {\n      const session = sshSession || this.sshSession || {};\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"POST\")\n        .contentType(\"application/x-www-form-urlencoded\")\n        .url(\n          this._instructionUrlHelper.queueInstructionUrl(\n            StartRemoteSshInstructionName,\n            [\n              { name: \"host\", value: session.sshHost },\n              { name: \"user\", value: session.sessionId },\n              { name: \"port\", value: session.sshPort },\n              { name: \"rport\", value: session.reverseSshPort }\n            ],\n            nodeId\n          )\n        );\n    }\n\n    /**\n     * Generate a URL for stopping a SolarSSH session.\n     *\n     * @param {string} [sessionId] the {@link module:domain/sshSession~SshSession} ID to use; if not provided the {@link module:net~SshUrlHelperMixin#sshSessionId} value will be used\n     * @returns {string} the URL\n     */\n    stopSshSessionUrl(sessionId) {\n      const sessId = sessionId || this.sshSessionId;\n      return (\n        this.baseUrl() + \"/ssh/session/\" + encodeURIComponent(sessId) + \"/stop\"\n      );\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the stop session request.\n     *\n     * <p>The returned builder will be configured for a <code>POST</code> request using the\n     * <code>queueInstructionUrl()</code> URL with the <code>StopRemoteSsh</code> instruction.\n     *\n     * @param {SshSession} [sshSession] the session to use; if not provided the <code>sshSession</code> property of this object will be used\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    stopSshSessionAuthBuilder(sshSession, nodeId) {\n      const session = sshSession || this.sshSession || {};\n      const node = nodeId || this.nodeId;\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"POST\")\n        .contentType(\"application/x-www-form-urlencoded\")\n        .url(\n          this._instructionUrlHelper.queueInstructionUrl(\n            StopRemoteSshInstructionName,\n            [\n              { name: \"host\", value: session.sshHost },\n              { name: \"user\", value: session.sessionId },\n              { name: \"port\", value: session.sshPort },\n              { name: \"rport\", value: session.reverseSshPort }\n            ],\n            node\n          )\n        );\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StartRemoteSsh</code> instruction.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStartRemoteSshInstructionUrl(instructionId) {\n      const session = this.sshSession || {};\n      const instrId = instructionId || session.startInstructionId;\n      return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StartRemoteSsh</code> instruction.\n     *\n     * <p>The returned builder will be configured with the same URL returned from\n     * {@link module:net~SshUrlHelperMixin#viewStartRemoteSshInstructionUrl}.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    viewStartRemoteSshInstructionAuthBuilder(instructionId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .url(this.viewStartRemoteSshInstructionUrl(instructionId));\n    }\n\n    /**\n     * Generate a URL for viewing the <code>StopRemoteSsh</code> instruction.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>startInstructionId</code> property of the session will be used\n     * @returns {string} the URL\n     */\n    viewStopRemoteSshInstructionUrl(instructionId) {\n      const session = this.sshSession || {};\n      const instrId = instructionId || session.stopInstructionId;\n      return this._instructionUrlHelper.viewInstructionUrl(instrId);\n    }\n\n    /**\n     * Configure the instruction auth builder for signing the request to view the\n     * <code>StopRemoteSsh</code> instruction.\n     *\n     * <p>The returned builder will be configured with the same URL returned from\n     * {@link module:net~SshUrlHelperMixin#viewStopRemoteSshInstructionUrl}.\n     *\n     * @param {number} [instructionId] the instruction ID to view; if not provided the <code>stopInstructionId</code> property of the session will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    viewStopRemoteSshInstructionAuthBuilder(instructionId) {\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .url(this.viewStopRemoteSshInstructionUrl(instructionId));\n    }\n\n    /**\n     * Configure the instruction auth builder for pre-signing the create session request.\n     *\n     * <p>The returned builder will be configured for a <code>GET</code> request using the\n     * <code>viewPendingInstructionsUrl()</code> URL.\n     *\n     * @param {number} [nodeId] the node ID to instruct; if not provided the <code>nodeId</code> property of this object will be used\n     * @returns {AuthorizationV2Builder} the builder\n     */\n    connectTerminalWebSocketAuthBuilder(nodeId) {\n      const node = nodeId || this.nodeId;\n      return this._instructionAuthBuilder\n        .reset()\n        .snDate(true)\n        .method(\"GET\")\n        .url(this._instructionUrlHelper.viewNodeMetadataUrl(node));\n    }\n  };\n\n/**\n * A concrete {@link UrlHelper} with the {@link module:net~SshUrlHelperMixin} and\n * {@link NodeUrlHelperMixin} mixins.\n *\n * @mixes SshUrlHelperMixin\n * @mixes NodeUrlHelperMixin\n * @extends UrlHelper\n */\nclass SshUrlHelper extends SshUrlHelperMixin(NodeUrlHelperMixin(UrlHelper)) {}\n\nexport default SshUrlHelperMixin;\nexport { SshUrlHelper };\n"],"names":["SshCommand","command","data","constructor","Object","freeze","result","toJsonEncoding","dataJson","JSON","parse","stringify","json","dataParser","obj","SshTerminalSettings","cols","lines","width","height","type","environment","Map","objectToStringMap","size","stringMapToObject","SolarSshCommandAttachSsh","AttachSshCommand","authorization","authorizationDate","username","password","terminalSettings","Date","getTime","termOpts","keys","prop","undefined","SshCloseCode","name","value","SshCloseCodeValues","ComparableEnum","SshCloseCodes","enumsValue","SshSession","created","sessionId","nodeId","sshHost","sshPort","reverseSshPort","startInstructionId","stopInstructionId","args","push","host","port","reversePort","SolarSshDefaultPath","SolarSshPathKey","SolarSshApiPathV1","SolarSshTerminalWebSocketPath","SolarSshTerminalWebSocketSubProtocol","SshSessionKey","StartRemoteSshInstructionName","StopRemoteSshInstructionName","InstructionUrlHelper","NodeInstructionUrlHelperMixin","NodeMetadataUrlHelperMixin","UserUrlHelperMixin","NodeUrlHelperMixin","UrlHelper","SshUrlHelperMixin","superclass","env","Environment","tls","solarSshPath","_instructionUrlHelper","_instructionAuthBuilder","AuthorizationV2Builder","path","hostUrl","sessId","sshSessionId","hostWebSocketUrl","encodeURIComponent","node","baseUrl","reset","snDate","method","url","viewPendingInstructionsUrl","sshSession","session","contentType","queueInstructionUrl","instructionId","instrId","viewInstructionUrl","viewStartRemoteSshInstructionUrl","viewStopRemoteSshInstructionUrl","viewNodeMetadataUrl","parameter","SshUrlHelper"],"mappings":"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"}